<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>读书笔记 on zhh's blog</title><link>https://livypad.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link><description>Recent content in 读书笔记 on zhh's blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 31 Aug 2022 00:10:00 +0800</lastBuildDate><atom:link href="https://livypad.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>笔记：Designing data-intensive applications(开始记录）</title><link>https://livypad.github.io/post/2022-08-31-ddia/</link><pubDate>Wed, 31 Aug 2022 00:10:00 +0800</pubDate><guid>https://livypad.github.io/post/2022-08-31-ddia/</guid><description>Designing data-intensive applications: the big ideas behind reliable, scalable, and maintainable systems Foundations of Data Systems Data Models SQL：关系型，key-value 对，关联程度一般 文档型：自包含文档，少关联 图数据库：数据大量关联 Storage and Retrival</description><content:encoded><![CDATA[<h1 id="designing-data-intensive-applications-the-big-ideas-behind-reliable-scalable-and-maintainable-systems">Designing data-intensive applications: the big ideas behind reliable, scalable, and maintainable systems</h1>
<h2 id="foundations-of-data-systems">Foundations of Data Systems</h2>
<h3 id="data-models">Data Models</h3>
<ul>
<li>SQL：关系型，key-value 对，关联程度一般</li>
<li>文档型：自包含文档，少关联</li>
<li>图数据库：数据大量关联</li>
</ul>
<h3 id="storage-and-retrival">Storage and Retrival</h3>
<ul>
<li>OLTP 数据存储系统
<ul>
<li>日志结构：追加
<ul>
<li>hash-map：key 对应数据文件当中的位置偏移，只要 key 表能装入内存
<ul>
<li>高性能读写</li>
<li>对大量 key 不友好</li>
<li>区间查询不友好</li>
</ul>
</li>
<li>SSTables：排序字符串表：按顺序合并存储 k-v
<ul>
<li>可以稀疏存储 key</li>
<li>内存维护表，大于表的写进磁盘文件，一个 log 用来数据恢复</li>
</ul>
</li>
</ul>
</li>
<li>原地更新
<ul>
<li>B-Tree：固定大小的段/页组合
<ul>
<li>页大小和底层磁盘契合</li>
<li>覆盖而不是追加</li>
<li>大于页大小时候分裂页</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>OLAP 数据分析系统
<ul>
<li>数据仓库：专门用于数据分析的数据库，是工作用数据库的副本，面向查询
<ul>
<li>事实表：记录事件事实的主表，大，列多</li>
<li>列存储：列太多，一行拆开，每列单独存</li>
<li>列压缩：<code>None</code>值可以被压缩</li>
<li>聚合：面对常见操作预处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="encoding">Encoding</h3>
<blockquote>
<p>向前兼容</p>
<p>旧版本可读新版本的数据，一般通过忽略实现</p>
</blockquote>
<blockquote>
<p>向后兼容</p>
<p>新版本可读旧版本数据</p>
</blockquote>
<ul>
<li>语言自带：性能、通用性差、安全问题（代码生成）</li>
<li>文本文件（XML，JSON，CSV）：大，各种数据格式支持弱</li>
<li>二进制编码：小，带有更好的兼容检查支持，自带类型，自带注释</li>
</ul>
<h3 id="dataflow">Dataflow</h3>
<ul>
<li>基于数据库：数据比代码长久，旧版本更新需要忽略新的项</li>
<li>基于服务（web 服务 和 RPC）
<ul>
<li>web 服务：通过 HTTP 向服务器公开的 API 调用服务</li>
<li>RPC：远程调用有网络自身带来新问题，大跨度有兼容性问题</li>
</ul>
</li>
<li>基于消息传递：加入一个消息代理/Actor</li>
</ul>
<h2 id="distributed-data">Distributed Data</h2>
<h3 id="replication">Replication</h3>
<ul>
<li>主从复制
<ul>
<li>分主节点（可读可写）和从节点（只读）</li>
<li>新节点建立：快照+基础上的变更 log</li>
<li>恢复：选举+重新配置</li>
<li>方法
<ul>
<li>基于语句：非确定性语句改为传结果（VM-FT）</li>
<li>基于预写日志 Write-ahead log (WAL)：磁盘字节改变的日志</li>
<li>基于行的逻辑日志：按照修改的逻辑</li>
<li>基于触发器：应用层控制</li>
</ul>
</li>
<li>复制滞后和一致性
<ul>
<li>写后读：个人能读到自己之前的写</li>
<li>单调读：多次读取的版本号不减</li>
<li>前缀一致读：读的顺序取绝于当时写的顺序</li>
</ul>
</li>
</ul>
</li>
<li>多主节点复制
<ul>
<li>场景：多中心、离线工作、协作编辑</li>
<li>需要解决/规避同时写冲突</li>
</ul>
</li>
<li>无主节点复制</li>
</ul>
]]></content:encoded></item><item><title>笔记：Distributed Systems An Algorithmic Approach 2nd（更新到第9章）</title><link>https://livypad.github.io/post/2022-07-09-ghoshdsaaa/</link><pubDate>Sat, 09 Jul 2022 01:31:57 +0800</pubDate><guid>https://livypad.github.io/post/2022-07-09-ghoshdsaaa/</guid><description>Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach Ch 1 introduction Ch 2 interprocess communication naming rpc remote procedure call cloud computing MapReduce ch 3 Models for Communication shared variable 共享变量 linda mobile agent 模型强弱 resequencing protocol, 非 FIFO 模拟 FIFO 共享变量模拟信息传递 信息传递模拟共享变量 信</description><content:encoded><![CDATA[<ul>
<li><a href="#ghosh-sukumar-2014---distributed-systems-an-algorithmic-approach">Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach</a>
<ul>
<li><a href="#ch-1-introduction">Ch 1 introduction</a></li>
<li><a href="#ch-2-interprocess-communication">Ch 2 interprocess communication</a>
<ul>
<li><a href="#naming">naming</a></li>
<li><a href="#rpc-remote-procedure-call">rpc remote procedure call</a></li>
<li><a href="#cloud-computing">cloud computing</a>
<ul>
<li><a href="#mapreduce">MapReduce</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-3-models-for-communication">ch 3 Models for Communication</a>
<ul>
<li><a href="#shared-variable-%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F">shared variable 共享变量</a>
<ul>
<li><a href="#linda">linda</a></li>
<li><a href="#mobile-agent">mobile agent</a></li>
</ul>
</li>
<li><a href="#%E6%A8%A1%E5%9E%8B%E5%BC%BA%E5%BC%B1">模型强弱</a>
<ul>
<li><a href="#resequencing-protocol-%E9%9D%9E-fifo-%E6%A8%A1%E6%8B%9F-fifo">resequencing protocol, 非 FIFO 模拟 FIFO</a></li>
<li><a href="#%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E6%A8%A1%E6%8B%9F%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92">共享变量模拟信息传递</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%E6%A8%A1%E6%8B%9F%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F">信息传递模拟共享变量</a></li>
<li><a href="#%E4%BF%A1%E9%81%93%E5%88%A4%E7%A9%BA%E7%9A%84%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%80%A7">信道判空的不可能性</a></li>
</ul>
</li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E5%88%86%E7%B1%BB">系统分类</a></li>
<li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E6%95%B0">复杂度计数</a></li>
</ul>
</li>
<li><a href="#ch-4-representing-distributed-algorithms">ch 4 Representing Distributed Algorithms</a>
<ul>
<li><a href="#%E5%85%AC%E6%AD%A3%E6%80%A7">公正性</a></li>
<li><a href="#scheduler">scheduler</a></li>
</ul>
</li>
<li><a href="#ch-5-program-correctness">ch 5 Program Correctness</a>
<ul>
<li><a href="#%E6%96%AD%E8%A8%80%E6%8E%A8%E7%90%86-assertional-reasoning">断言推理 assertional reasoning</a></li>
<li><a href="#%E8%89%AF%E5%9F%BA%E9%9B%86-well-founeded-set">良基集 well-founeded set</a></li>
<li><a href="#%E6%97%B6%E9%97%B4%E9%80%BB%E8%BE%91-temporal-logic">时间逻辑 temporal logic</a></li>
</ul>
</li>
<li><a href="#ch-6-time-in-a-distributed-system">ch 6 Time in a Distributed System</a>
<ul>
<li><a href="#%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F">逻辑时钟</a>
<ul>
<li><a href="#%E5%BC%B1%E6%97%B6%E9%92%9F%E6%9D%A1%E4%BB%B6-%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB-prec">弱时钟条件 偏序关系 $\prec$</a></li>
<li><a href="#%E5%BC%B1%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F-logic-clock">弱时钟实现的逻辑时钟 logic clock</a></li>
<li><a href="#%E5%BC%BA%E6%97%B6%E9%92%9F%E5%85%B3%E7%B3%BB-%E5%85%A8%E5%BA%8F%E5%85%B3%E7%B3%BB-ll">强时钟关系 全序关系 $\ll$</a></li>
</ul>
</li>
<li><a href="#%E5%90%91%E9%87%8F%E6%97%B6%E9%92%9F-vector-clock">向量时钟 vector clock</a></li>
<li><a href="#%E7%89%A9%E7%90%86%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5">物理时钟同步</a>
<ul>
<li><a href="#berkeley-%E7%AE%97%E6%B3%95-%E5%86%85%E9%83%A8%E5%90%8C%E6%AD%A5">Berkeley 算法 内部同步</a></li>
<li><a href="#lamport-and-melliarsmith-%E7%AE%97%E6%B3%95-%E5%86%85%E9%83%A8%E5%90%8C%E6%AD%A5">Lamport and Melliar–Smith 算法 内部同步</a></li>
<li><a href="#cristian-%E7%AE%97%E6%B3%95-%E5%A4%96%E9%83%A8%E5%90%8C%E6%AD%A5">Cristian 算法 外部同步</a></li>
<li><a href="#ntp-network-time-protocol-%E5%AE%9E%E7%8E%B0">NTP network time protocol 实现</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-7-mutual-exclusion">ch 7 Mutual Exclusion</a>
<ul>
<li><a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E6%A1%88">消息传递模型的方案</a>
<ul>
<li><a href="#lamport-%E6%96%B9%E6%A1%88">Lamport 方案</a></li>
<li><a href="#ricartagrawala-%E6%96%B9%E6%A1%88">Ricart–Agrawala 方案</a></li>
<li><a href="#maekawa-%E6%96%B9%E6%A1%88">Maekawa 方案</a></li>
</ul>
</li>
<li><a href="#token-passing-%E7%9A%84%E6%96%B9%E6%A1%88">token-passing 的方案</a>
<ul>
<li><a href="#suzukikasami-%E6%96%B9%E6%A1%88">Suzuki–Kasami 方案</a></li>
<li><a href="#raymond-%E6%96%B9%E6%A1%88">Raymond 方案</a></li>
</ul>
</li>
<li><a href="#%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E6%96%B9%E6%A1%88">共享存储的方案</a>
<ul>
<li><a href="#peterson-%E6%96%B9%E6%A1%88-%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">Peterson 方案 不使用原子指令</a></li>
<li><a href="#test-and-set-%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">test-and-set 原子指令</a></li>
<li><a href="#load-linked-%E5%92%8C-store-conditional-%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">load-linked 和 store-conditional 原子指令</a></li>
</ul>
</li>
<li><a href="#%E7%BB%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5">组同步互斥</a>
<ul>
<li><a href="#%E4%B8%AD%E5%BF%83%E5%8C%96%E6%96%B9%E6%A1%88">中心化方案</a></li>
<li><a href="#%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%96%B9%E6%A1%88">去中心化方案</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-8-distributed-snapshot">ch 8 Distributed Snapshot</a>
<ul>
<li><a href="#chandy-lamport-%E7%AE%97%E6%B3%95">Chandy-Lamport 算法</a></li>
<li><a href="#lai-yang-%E7%AE%97%E6%B3%95">Lai-Yang 算法</a></li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F-debug">分布式 debug</a></li>
</ul>
</li>
<li><a href="#ch-9-global-state-collection">ch 9 Global State Collection</a>
<ul>
<li><a href="#%E5%85%A8%E5%B1%80%E5%B9%BF%E6%92%AD">全局广播</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E7%BB%88%E6%AD%A2%E6%A3%80%E6%B5%8B">程序终止检测</a>
<ul>
<li><a href="#dijstra-scholten-%E7%AE%97%E6%B3%95">Dijstra-Scholten 算法</a></li>
<li><a href="#%E5%8D%95%E5%90%91%E7%8E%AF%E7%9A%84-token-passing">单向环的 token passing</a></li>
<li><a href="#%E4%BF%A1%E7%94%A8%E7%82%B9%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95-credit-recovery-algorithm">信用点分配算法 credit-recovery algorithm</a></li>
</ul>
</li>
<li><a href="#%E6%B5%AA%E6%BD%AE-wave-%E7%AE%97%E6%B3%95">浪潮 wave 算法</a></li>
</ul>
</li>
<li><a href="#ch-11-coordination-algorithms">ch 11 Coordination Algorithms</a></li>
<li><a href="#ch-12-fault-tolerant-systems">ch 12 Fault-Tolerant Systems</a></li>
<li><a href="#ch-13-distributed-consensus">ch 13 Distributed Consensus</a></li>
</ul>
</li>
</ul>
<h1 id="ghosh-sukumar-2014---distributed-systems-an-algorithmic-approach">Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach</h1>
<p>一本高屋建瓴讨论分布式里面重要问题的书。这篇笔记主要就是结合我的理解复述一下书里的我感觉比较重要内容的流水账。</p>
<h2 id="ch-1-introduction">Ch 1 introduction</h2>
<p>特征</p>
<ol>
<li>多进程</li>
<li>进程间通讯</li>
<li>分离地址空间</li>
<li>单任务</li>
</ol>
<p>使用分布式的原因</p>
<ul>
<li>地理分离</li>
<li>加速</li>
<li>远端资源共享</li>
<li>容错</li>
</ul>
<p>一般的问题</p>
<ol>
<li>leader 选举</li>
<li>互斥</li>
<li>时钟同步</li>
<li>全局状态</li>
<li>组播</li>
<li>副本管理</li>
</ol>
<h2 id="ch-2-interprocess-communication">Ch 2 interprocess communication</h2>
<h3 id="naming">naming</h3>
<p>位置无关，方便定位实体。一般是文本形式，树状结构</p>
<h3 id="rpc-remote-procedure-call">rpc remote procedure call</h3>
<ul>
<li>机器差异（大小端，指针和地址）</li>
<li>阻塞/非阻塞</li>
<li>丢包：at-least-once/at-most-once,exactly once</li>
</ul>
<table>
<thead>
<tr>
<th>Client Stub</th>
<th>Server Stub</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pack parameters into a message，Send message to remote machine</td>
<td>Do no message → skip od ，Unpack the call parameters</td>
</tr>
<tr>
<td>Do no result → skip od*，Receive result and unpack it</td>
<td>Call the server procedure Receive result and unpack it Pack result into a message</td>
</tr>
<tr>
<td>Return to the client program</td>
<td>Send it to the client</td>
</tr>
</tbody>
</table>
<h3 id="cloud-computing">cloud computing</h3>
<ul>
<li>software-as-a-service, SaaS
<ul>
<li>Google doc，云盘等</li>
</ul>
</li>
<li>platform-as-a-service, PaaS
<ul>
<li>小程序 API（？</li>
</ul>
</li>
<li>infrastructure-as-a-service, IaaS
<ul>
<li>elastic computing cloud， EC2 云服务器</li>
</ul>
</li>
</ul>
<h4 id="mapreduce">MapReduce</h4>
<p>Map: 〈<em>key, value</em>〉→ list of 〈<em>key, value</em>〉</p>
<p>{This is the intermediate 〈key, value〉 pair}</p>
<p>Reduce: 〈<em>key, list of values</em>〉 → list of 〈<em>key, value</em>〉</p>
<h2 id="ch-3-models-for-communication">ch 3 Models for Communication</h2>
<blockquote>
<p>本书的可靠信道公理 channel</p>
<ol>
<li>所有发出消息都被接收方收到，所有收到消息都有发送者
<ul>
<li>对数据链路/传输层不适用，需要恢复</li>
</ul>
</li>
<li>每条信息都有一条任意，有限长，非零延迟
<ul>
<li>为了放宽对不同延迟的支持</li>
</ul>
</li>
<li>信道呈现 FIFO 特性
<ul>
<li>电报 datagram 网络乱序</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="shared-variable-共享变量">shared variable 共享变量</h3>
<blockquote>
<p>DSM</p>
<p>distribted shared memory，方便使用共享变量有关的编程工具</p>
</blockquote>
<ol>
<li>state reading/locally shared variable 读取自身和邻居状态，只能修改自己状态</li>
<li>link register 链路自带单读者单写者寄存器</li>
</ol>
<h4 id="linda">linda</h4>
<p>共享的 tuple space</p>
<table>
<thead>
<tr>
<th>原语</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>IN，INP</td>
<td>取出 tuple，分阻塞、非阻塞版本</td>
</tr>
<tr>
<td>OUT</td>
<td>放入 tuple</td>
</tr>
<tr>
<td>RD，RDP</td>
<td>读 tuple，类比 in 不删除。分阻塞、非阻塞版本</td>
</tr>
<tr>
<td>EVAL</td>
<td>创建新进程</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/** main program**/</span>
</span></span><span class="line"><span class="cl"><span class="n">real_main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">argc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">nslave</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">hello</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">nslave</span> <span class="o">=</span> <span class="n">atoi</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nslave</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    	<span class="n">EVAL</span> <span class="p">(</span><span class="s">&#34;slave&#34;</span><span class="p">,</span> <span class="n">hello</span><span class="p">(</span><span class="n">j</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nslave</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    	<span class="n">IN</span><span class="p">(</span><span class="s">&#34;done&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Task completed.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** subroutine hello **/</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hello</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Task from number %d.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUT</span><span class="p">(</span><span class="s">&#34;done&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="mobile-agent">mobile agent</h4>
<p>移动执行的代码</p>
<p>(I, P, B)</p>
<ul>
<li>I 标识符</li>
<li>P 对应代码</li>
<li>B 代码的变量</li>
</ul>
<h3 id="模型强弱">模型强弱</h3>
<p>强模型限制多，操作多；强模型模拟弱模型容易，反之可能困难</p>
<h4 id="resequencing-protocol-非-fifo-模拟-fifo">resequencing protocol, 非 FIFO 模拟 FIFO</h4>
<p>缓存再发送。可以优化为环形缓存编号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">{Sender process P}
</span></span><span class="line"><span class="cl">var i : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">    send m[i],i to Q;
</span></span><span class="line"><span class="cl">    i := i+1;
</span></span><span class="line"><span class="cl">forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{Receiver process Q}
</span></span><span class="line"><span class="cl">var k : integer {initially 0}
</span></span><span class="line"><span class="cl">buffer : buffer [0..∞] of message
</span></span><span class="line"><span class="cl">{initially for all k:buffer[k] = null}
</span></span><span class="line"><span class="cl">repeat{store}
</span></span><span class="line"><span class="cl">	receive m[i],i from P;
</span></span><span class="line"><span class="cl">    store m[i] into buffer[i];
</span></span><span class="line"><span class="cl">    {deliver}
</span></span><span class="line"><span class="cl">    while buffer[k] ≠ null do
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">        deliver the content of buffer [k];
</span></span><span class="line"><span class="cl">        buffer [k] := null; k := k+1;
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="共享变量模拟信息传递">共享变量模拟信息传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">shared var p, q: integer {initially p = q}
</span></span><span class="line"><span class="cl">buffer: array [0..max-1] of message
</span></span><span class="line"><span class="cl">{Sender process P}
</span></span><span class="line"><span class="cl">var s: array of messages sent by P, i : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">	if p ≠ q − 1 mod max then
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">    	buffer[p] := s[i]; i := i + 1; p := p + 1 mod max
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{Receiver process Q}
</span></span><span class="line"><span class="cl">var r: array of messages received by Q, j : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">    if q ≠ p mod max then
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">    	r[j] := buffer[q]; j := j + 1; q := q + 1 mod max
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="信息传递模拟共享变量">信息传递模拟共享变量</h4>
<p>下列实现错误：</p>
<ol>
<li>组播不 atmoic，atmoic 组播有代价</li>
<li>组播不一定遵循更新变量顺序</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">{Implementing shared memory by message passing: first attempt}
</span></span><span class="line"><span class="cl">{read X by process i}
</span></span><span class="line"><span class="cl">read x[i] x[i] := v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{write X := v by process i}
</span></span><span class="line"><span class="cl">x[i] := v
</span></span><span class="line"><span class="cl">Multicast v to every other process j (j ≠ i) in the system;
</span></span><span class="line"><span class="cl">Process j (j ≠ i), after receiving the multicast, sets x[j] to v.
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="信道判空的不可能性">信道判空的不可能性</h4>
<p>如果进程<code>i,j</code>之间信道需要判空</p>
<ul>
<li>已知<code>i,j</code>之间最大时延 T，等待 T</li>
<li>未知最大时延，初始信道可以包含任意信息，无法判空（即使使用一个清零帧）</li>
</ul>
<h3 id="系统分类">系统分类</h3>
<ul>
<li>reactive：反应性，对请求响应</li>
<li>transformational：转移性，存在初态和末态</li>
<li>named：和处理器标识有关</li>
<li>anonymous：和处理器标识无关，即使标识改变可以继续运行，需要如随机数等机制打破对称性</li>
</ul>
<h3 id="复杂度计数">复杂度计数</h3>
<ul>
<li>空间复杂度：按 node 数目的增长要求的空间</li>
<li>时间复杂度
<ul>
<li>总步数</li>
<li>总轮次 round：最远端的执行一次是一轮</li>
</ul>
</li>
</ul>
<h2 id="ch-4-representing-distributed-algorithms">ch 4 Representing Distributed Algorithms</h2>
<blockquote>
<p>guard</p>
<p>断言，条件执行，如果多个断言判正确，由 scheduler 决定执行任意一个代码段，下面假定每个代码段原子执行</p>
</blockquote>
<p>程序终止条件</p>
<ol>
<li>每个进程终止，guard 全判<code>false</code></li>
<li>无消息还在传递</li>
</ol>
<p>类似如下的伪代码和对应的 Rust 实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">program uncertain;
</span></span><span class="line"><span class="cl">define x : integer;
</span></span><span class="line"><span class="cl">initially x = 0
</span></span><span class="line"><span class="cl">do
</span></span><span class="line"><span class="cl">  x &lt; 4 → x := x + 1
</span></span><span class="line"><span class="cl">  [] x = 3 → x := 0
</span></span><span class="line"><span class="cl">od
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rand</span>::<span class="n">Rng</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="n">atomic</span>::<span class="p">{</span><span class="n">AtomicUsize</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="n">CNT</span>: <span class="nc">AtomicUsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">AtomicUsize</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">CNT</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">Relaxed</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">the</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">the</span><span class="p">(</span><span class="n">i</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">CNT</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">Relaxed</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">guess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand</span>::<span class="n">thread_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">guess</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="mi">0</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;terminate in {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">CNT</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="公正性">公正性</h3>
<p>由于 guarded action 的选择依赖 scheduler （调度器） 决定，scheduler 需要考虑公平性</p>
<ul>
<li>无条件公平：每个代码段最终会进入调度队列，无论 guard 值</li>
<li>弱公平：只要代码段的 guard 变为并保持 <code>true</code>就最终会进入调度队列</li>
<li>强公平：只要代码段的 guard 能无限次经常变为<code>true</code>就最终会进入调度队列，弱公平能跑出的顺序，强公平一定能跑出，反之不一定</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">program test
</span></span><span class="line"><span class="cl">define
</span></span><span class="line"><span class="cl">x: integer {initial value undefined}
</span></span><span class="line"><span class="cl">do
</span></span><span class="line"><span class="cl">  true → x := 0
</span></span><span class="line"><span class="cl">  [] x = 0 → x := 1
</span></span><span class="line"><span class="cl">  [] x = 1 → x := 2
</span></span><span class="line"><span class="cl">od
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>不公平时可能只执行第 1 条</li>
<li>弱公平时只保证执行第 1、2 条（一直执行第 1 条会保证 x=0 从而执行 2，但 x=1 时可以只执行第 1 条而使得第 3 条永不满足）</li>
</ul>
<h3 id="scheduler">scheduler</h3>
<blockquote>
<p>central scheduler</p>
<p>又名 serial scheduler：原子的调度执行 guard 对应的代码段，简单，可以用 token 传递实现，拓展性差，并行度差，是分布式 scheduler 的退化情形</p>
<p>有关的 Theorem：</p>
<ol>
<li>算法在 central scheduler 下正确</li>
<li>已为<code>true</code> 的 guard 不会被其他代码段修改为<code>false</code></li>
</ol>
<p>=&gt;在 distributed scheduler 下正确</p>
</blockquote>
<h2 id="ch-5-program-correctness">ch 5 Program Correctness</h2>
<blockquote>
<p>安全 safety 条件</p>
<p>&ldquo;bad things never happen.&rdquo;</p>
</blockquote>
<p>如：</p>
<ul>
<li>同步互斥：至多一个进程在临界区</li>
<li>有限容量信道：$nC\le nP\le nC+B$</li>
<li>读写锁：$(nW\le 1 \wedge nR=0) \vee (nW=0\wedge nR\ge 0)$</li>
<li>无死锁：$Q\wedge GG$</li>
<li>部分正确性：如果不死锁，必得正确结果 $\neg GG\implies Q$</li>
</ul>
<blockquote>
<p>活跃 liveness 条件</p>
<p>&ldquo;good things eventually happen.&rdquo;</p>
</blockquote>
<p>如：</p>
<ul>
<li>进行：对于同步互斥问题，不死锁，不活锁（声明了临界区，最终总能获得机会）</li>
<li>公平性：有限时间后 schduler 总会调度</li>
<li>可达性：是否可以从初始状态 $S_0$ 到达状态 $S_k$</li>
<li>终止：部分正确+终止状态可达</li>
</ul>
<h3 id="断言推理-assertional-reasoning">断言推理 assertional reasoning</h3>
<p>用于证明安全性。构造不变式 $I$ 代表安全性条件（类似数学归纳法）</p>
<ol>
<li>初态不变式 $I$满足</li>
<li>假定前状态不变式 $I$满足，任何执行后不变式 $I$ 仍然满足</li>
</ol>
<h3 id="良基集-well-founeded-set">良基集 well-founeded set</h3>
<p>用于证明活跃性。一个映射（测量函数/变化函数 measured/variant function）从系统全局状态到一个 well-founed set $f:S\to WF$</p>
<blockquote>
<p>well-founded set</p>
<p>对于 $WF=\{w_1,w_2,&hellip;\}$ ，上面有个全序关系$\gg$</p>
<ol>
<li>不存在无穷比较链 $w_1\gg w_2 \gg &hellip;$</li>
<li>系统状态从 $s_1$ 到 $s_2$ ，有 $w_1=f(s_1),w_2=f(s_2) \implies w_1 \gg w_2$</li>
</ol>
</blockquote>
<p>一般 well-founed set 会选择非负整数集，0 就是终止状态，全序关系就是大于；也有选择 set 是一组元素，全序关系是字典顺序。</p>
<h3 id="时间逻辑-temporal-logic">时间逻辑 temporal logic</h3>
<ul>
<li>$\Box P$ 意思是 $P$ 永真</li>
<li>$\lozenge P$ 意思是 $P$ 最终会变为真</li>
</ul>
<p>有</p>
<ol>
<li>$\lozenge P=\neg \Box (\neg P)$：P 假不是一直不真的=P 假最终会不真</li>
<li>$\Box P\wedge \Box Q=\Box (P\wedge Q)$</li>
<li>$\Box P\vee \Box Q=\Box (P\vee Q)$</li>
<li>$\lozenge\Box P\implies \Box \lozenge P$：P 最终会一直真推出 P 会一直经常真（强公平蕴含弱公平）</li>
<li>$\lozenge P\wedge \lozenge Q=\lozenge (P\wedge Q)$</li>
<li>$\lozenge P\vee \lozenge Q=\lozenge (P\vee Q)$</li>
<li>$\lozenge P\vee Q\neq \lozenge (P\vee Q)$: <strong>注意：</strong> 如果 $Q=\neg P$，右边永真，左边可以为假</li>
</ol>
<h2 id="ch-6-time-in-a-distributed-system">ch 6 Time in a Distributed System</h2>
<h3 id="逻辑时钟">逻辑时钟</h3>
<h4 id="弱时钟条件-偏序关系-prec">弱时钟条件 偏序关系 $\prec$</h4>
<ol>
<li>同一进程里，a 在 b 后发生，$a\prec b$</li>
<li>两个进程通讯，i 进程的 a 发送，j 进程 b 接受，$a\prec b$</li>
<li>$(a\prec b)\wedge(b\prec c)\implies (a\prec c)$</li>
</ol>
<h4 id="弱时钟实现的逻辑时钟-logic-clock">弱时钟实现的逻辑时钟 logic clock</h4>
<ol>
<li>每个本地事件发生，$LC$ 递增 1</li>
<li>发送消息时附上当前 $LC$ 作为时间戳</li>
<li>接受到消息时 $LC=1+\max(local; LC, message; LC)$</li>
</ol>
<p>此时可以保证，但是反之不成立。逻辑时钟不能完全和因果关系互推，需要<a href="#%E5%90%91%E9%87%8F%E6%97%B6%E9%92%9F-vector-clock">向量时钟</a>。</p>
<p>$a\prec b\implies LC(a)&lt;LC(b)$</p>
<h4 id="强时钟关系-全序关系-ll">强时钟关系 全序关系 $\ll$</h4>
<p>$a\ll b$ 成立条件</p>
<ul>
<li>要么$LC(a)&lt;LC(b)$</li>
<li>要么不同进程，事件 a、b 对应进程 i、j，有 $LC(a)=LC(b),i&lt;j$</li>
</ul>
<h3 id="向量时钟-vector-clock">向量时钟 vector clock</h3>
<p>从事件集到进程数大小(假定为 n)的非负整数向量的函数 $VC:V\to A$。事件 a、b 的向量时钟之间大小关系$VC(a)&lt;VC(b)$的充要条件为</p>
<ol>
<li>$\forall i:i\in [0,n-1]:VC_i(a)\le VC_i(b)$</li>
<li>$\exists j\in[0,n-1]:VC_j(a)&lt;VC_j(b)$</li>
</ol>
<p>如果两个事件之间向量时钟既不大于也不小于，认为事件同时，记作$a\parallel b$。向量时钟保证了因果检测，即 $a\prec b \iff VC(a)&lt;VC(b)$ 。实现要求：</p>
<ol>
<li>进程 i 本地事件发生时候 $VC_i[i]+=1$</li>
<li>发送信息时附带整个向量时钟</li>
<li>进程 j 收到消息附带时间戳 $T$ 时，先更新本地 $VC_j[j]+=1$ ，再更新全局 $\forall k \in [0,n-1]:VC_k[j]=\max(T_k,VC_k[j])$</li>
</ol>
<h3 id="物理时钟同步">物理时钟同步</h3>
<ol>
<li>外部时钟同步：和 UTC/原子钟/GPS 同步时间。可以借助 NTP（network time protocol）协议</li>
<li>内部时钟同步：在即使内部少数错误时钟下仍然同步时间，只需要内部相互同步即可，注意一般通过调快/调慢实现以防止突变</li>
<li>相同步</li>
<li>有界时钟：只能通过加位数保证可预见未来不溢出</li>
</ol>
<ul>
<li>偏移率 drift rate：内部时钟和理想时钟走时速度不完全相等：$(1-\rho)\le \frac{\rm{d}C}{\rm{d}t}\le(1+\rho)$</li>
<li>时钟偏差 clock skew：时钟之间最大允许读数偏差 $\delta$</li>
<li>重同步间隔 resynchronization interval ：$R$</li>
</ul>
<h4 id="berkeley-算法-内部同步">Berkeley 算法 内部同步</h4>
<p>选择一个 leader 收集计算各个内部时钟的平均值，并按此调整</p>
<h4 id="lamport-and-melliarsmith-算法-内部同步">Lamport and Melliar–Smith 算法 内部同步</h4>
<p>去中心化的算法。可以应对 two-faced clock 问题。$c_k[i]$ 表示时钟 i 读取时钟 k 得到的值。</p>
<blockquote>
<p>two-faced clock</p>
<p>2 个非错时钟向 two-faced 时钟读数结果不一致</p>
</blockquote>
<ol>
<li>读系统中每个时钟的值</li>
<li>将离群值丢弃,用本地值代替： $|c_i[i]-c_j[i]|&gt;\delta \implies c_j[i]\gets c_i[i]$</li>
<li>使用处理后的平均值覆盖本地时钟值</li>
</ol>
<p>对于 n 个时钟，只要 two-faced clock 数目 t 有 $n&gt;3t$ 就能保证同步。</p>
<p>考虑 3 个时钟，i、j 好，k 为 two-faced clock。有如下配置</p>
<ul>
<li>$c_i[i]=c$</li>
<li>$c_j[j]=c-\delta$</li>
<li>$c_k[i]=c+\delta$</li>
<li>$c_k[j]=c-2\delta$</li>
</ul>
<p>这时候 i、j 平均值差为 $\frac{3t\delta}{n}$。如果 $n&gt;3t$ 就有$\frac{3t\delta}{n}&lt;\delta$。同步间隔 $R\le(\delta -\frac{3t\delta}{n})/\rho$</p>
<h4 id="cristian-算法-外部同步">Cristian 算法 外部同步</h4>
<p>每个 client 向有精确时钟的 time server 定时通信来同步时钟： $R&lt;\frac{\delta}{2\rho}$。</p>
<blockquote>
<p>round-trip time</p>
<p>每次同步通过发起 RPC，用来度量信号延迟：$RTT=T_2-T_1$</p>
</blockquote>
<p>每次时钟修正为 $T_s+\frac{RTT}{2}=T_s+\frac{T_2-T_1}{2}$。但实际网络波动，返回时间是一个区间，记最短用时 $min$，对应同步精度 $\pm(\frac{T_2-T_1}{2}-min)$</p>
<h4 id="ntp-network-time-protocol-实现">NTP network time protocol 实现</h4>
<p>按层级 stratum 组织各计算机，stratum 0 对应直连高精度时钟，stratum $i$ 作为 $i+1$ 的 time server，精度随着层级增加递减。</p>
<ul>
<li>组播：使用 UDP 协议定期发送</li>
<li>RPC：使用 <a href="#cristian-%E7%AE%97%E6%B3%95-%E5%A4%96%E9%83%A8%E5%90%8C%E6%AD%A5">Cristian 算法</a></li>
<li>P2P 通信：同层级的 time server 互相同步保持精度。设 Q 在 P 之前$\delta$，互相发报：$T_2=T_1+T_{PQ}+\delta,T_4=t_3+T_{QP}-\delta$，则有 $\delta=\frac{T_2-T_4-T_1+T_3}{2}-\frac{T_{PQ}-T_{QP}}{2},RTT=T_{PQ}+T_{QP}=T_2+T_4-T_1-T_3$， 这时候两个时钟误差$\delta$就可以控制在 $\frac{T_2-T_4-T_1+T_3}{2}\pm\frac{RTT}{2}$ 里面（注意到 $T_{PQ},T_{QP}&gt;0$，相减的值可以由 RTT 控制）</li>
</ul>
<h2 id="ch-7-mutual-exclusion">ch 7 Mutual Exclusion</h2>
<p>3 个基本要求</p>
<ol>
<li>同步互斥 Mutual exclusion：至多一个进程在临界区，这是安全性性质</li>
<li>不死锁 Freedom from deadlock：至少一个进程可以运行和进入临界区，也是安全性性质</li>
<li>进展 Progress：每个尝试进入临界区的进程最终总能进入，这是活跃性性质</li>
</ol>
<blockquote>
<p>livelock/starvation</p>
<p>违反性质 3。进程一直被阻止进入临界区</p>
</blockquote>
<blockquote>
<p>FIFO fairness，FIFO 公平</p>
<p>进入临界区的顺序按照申请的顺序，类似 FIFO 队列。注意是申请的时间而不是申请到达 central coordinator（如果采用中心化的算法）的时间，所以一般世俗机构的办事先到先得不是 FIFO fairness</p>
</blockquote>
<h3 id="消息传递模型的方案">消息传递模型的方案</h3>
<p>下面算法一般要求发送消息时间戳。注意到如果只考虑同步互斥问题，时间戳最大差 $(n-1)$，因此可以选择 $\mathrm{mod}(2n-1)$ 的时间戳，有效规避无界时钟问题（详见 <a href="#%E7%89%A9%E7%90%86%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5">物理时钟章节</a> ）。</p>
<h4 id="lamport-方案">Lamport 方案</h4>
<ul>
<li>全连接网络</li>
<li>信道 FIFO，不丢信息</li>
<li>每个进程维护一个队列 Q</li>
<li>3 特性+FIFO 公平，一轮需要 $3(n-1)$ 次消息传递</li>
</ul>
<ol>
<li>期望进入临界区的进程广播带时间戳<code>request</code></li>
<li>接受到<code>request</code>的进程
<ol>
<li>不在临界区：回复 <code>ack</code></li>
<li>在临界区：直到退出临界区再回复<code>ack</code></li>
</ol>
</li>
<li>进入临界区条件：
<ol>
<li>检查本地队列 Q 自己的请求最早</li>
<li>其他进程都回复了<code>ack</code></li>
</ol>
</li>
<li>退出临界区时：
<ol>
<li>删除本地队列 Q 中自己的请求</li>
<li>广播带时间戳<code>release</code></li>
</ol>
</li>
<li>收到<code>release</code>后进程删除对应的请求</li>
</ol>
<h4 id="ricartagrawala-方案">Ricart–Agrawala 方案</h4>
<ul>
<li>不需要维护本地队列</li>
<li>只是更多的缓存请求.对时间戳晚于自己的请求，当时不在临界区时：
<ul>
<li>Lamport 方案回复</li>
<li>Ricart–Agrawala 方案缓存</li>
</ul>
</li>
<li>3 特性+FIFO 公平，一轮需要 $2(n-1)$ 次消息传递</li>
</ul>
<ol>
<li>期望进入临界区的进程广播带时间戳<code>request</code></li>
<li>接受到<code>request</code>的进程回复 <code>ack</code> 条件，反之缓存请求
<ul>
<li>该进程不准备进入临界区</li>
<li>该进程期望进入的时间戳晚于对应的<code>request</code></li>
</ul>
</li>
<li>进入临界区条件其他进程都回复了<code>ack</code></li>
<li>退出临界区执行其他操作前，对等待的请求回复<code>ack</code></li>
</ol>
<h4 id="maekawa-方案">Maekawa 方案</h4>
<p>每个进程 i 属于单独的通信组 $S_i$。组内互相监督满足临界区，只要组的覆盖足够好，就可以减少通信支出。大概为 $3\sqrt{n}=O(\sqrt{n})$</p>
<ol>
<li>$\forall i,j\in [0,n-1],S_i\cap S_j\neq \varnothing$：保证全局覆盖</li>
<li>$i\in S_i$：自身也被监督</li>
<li>最好的，每个进程属于通信组的次数相同（有对称性）</li>
</ol>
<blockquote>
<p>global FIFO</p>
<p>每个进程严格按照发送时间戳接受消息：极难实现</p>
</blockquote>
<ul>
<li>global FIFO 成立时
<ol>
<li>期望进入临界区的进程对 $S_i$ 广播带时间戳<code>request</code></li>
<li>对时间戳最早的请求回复<code>ack</code>，锁住，其他请求排在队列中；如果进程在临界区里，退出时再进行</li>
<li>进入临界区条件：收到 $S_i$ 中每个进程的 <code>ack</code></li>
<li>退出临界区时对 $S_i$ 广播<code>release</code></li>
<li>接收到<code>release</code>后从队列剔除对应请求，解锁，重复<code>步骤2</code></li>
</ol>
</li>
<li>没有 global FIFO，可能会因为循环等 <code>ack</code> 导致死锁，需要添加放弃机制
<ol>
<li>期望进入临界区的进程对 $S_i$ 广播带时间戳<code>request</code></li>
<li>不在临界区时接受到请求：</li>
<li>未锁：对时间戳最早的请求回复<code>ack</code>，锁定</li>
<li>已锁，新请求的时间戳更晚：回复<code>failed</code></li>
<li>已锁，新请求的时间戳更早：排队请求，对之前锁定请求的发送方发<code>inquire</code>，可能会重排顺序</li>
<li>进入临界区条件：收到 $S_i$ 中每个进程的 <code>ack</code>
<ul>
<li>如果收到 <code>inquire</code> 还接受到了<code>failed</code>，对 $S_i$ 广播 <code>relinquish</code> 放弃排期自己的请求</li>
<li>如果只收到 <code>inquire</code> 可以忽略</li>
</ul>
</li>
<li>退出临界区时对 $S_i$ 广播<code>release</code></li>
<li>接收到<code>release</code>后从队列剔除对应请求，解锁，重复<code>步骤2</code></li>
<li>已锁，接受到<code>relinquish</code>，重排队列，对时间戳最早的发<code>ack</code></li>
</ol>
</li>
</ul>
<h3 id="token-passing-的方案">token-passing 的方案</h3>
<h4 id="suzukikasami-方案">Suzuki–Kasami 方案</h4>
<p>全连接网络。初始有个进程拥有 token。期望进入临界区的进程 $i$ 广播带序列号的消息 $(i,num)$。拿到 token 即允许进入临界区。每个进程有本地队列 Q 和本地向量</p>
<ul>
<li>$req[0,&hellip;,n-1]$ 记录对应进程最近请求序列号</li>
<li>$last[0,&hellip;,n-1]$ 记录对应进程进入临界区次数</li>
</ul>
<p>进程 $i$ 拿到 token 后</p>
<ol>
<li>$last[i]\gets num$</li>
<li>将满足 $1+last[k]=req[k]$ 的每个进程 k 加入本地队列 Q</li>
<li>执行临界区</li>
<li>取出 Q 第一项传递 token</li>
</ol>
<p>对应消息总数 $(n-1)+1$（发出 $n-1$，接收 1 条 token）</p>
<h4 id="raymond-方案">Raymond 方案</h4>
<p>关系组织成树。每个进程有一个本地队列。一般的，树之间节点距离就是通信开销 $O(\log{n})$</p>
<ol>
<li>节点拥有 token 时候为树的根，并可以进去临界区，反之将自己的请求加入自己本地队列</li>
<li>节点没有 token，本地队列非空时给父节点发送请求，除非已经发送并在等待</li>
<li>根节点结束临界区，收到请求时，给本地队列第一项的邻居传递 token，并改为指向该邻居，该邻居变成根节点</li>
<li>接受到 token 时候，向本地队列第一项的邻居继续传递，并删除对应的请求，改为指向该邻居，如果队列中还有请求，向新的父节点发送请求</li>
</ol>
<h3 id="共享存储的方案">共享存储的方案</h3>
<p>一般依靠原子指令：</p>
<ul>
<li>compare-and-swap (CAS)：比较预期值和内存变量，相等时候改为新传入的值，反之不修改，返回执行之后的内存变量值</li>
<li>fetch-and-add(FA)：原子加</li>
<li>semaphore 信号量：非负整数支持原子操作，可以对应资源个数
<ul>
<li>$P(s)\triangleq\{waituntil; s&gt;0\implies s-=1\}$：申请资源，取得后可用资源-1</li>
<li>$V(s)\triangleq\{s+=1\}$：释放资源，可用资源+1</li>
</ul>
</li>
</ul>
<h4 id="peterson-方案-不使用原子指令">Peterson 方案 不使用原子指令</h4>
<p>2 个进程版本</p>
<pre tabindex="0"><code>program peterson;
define flag[0], flag[1] shared Boolean;
turn: shared integer
initially flag[0] = false, flag[1] = false, turn = 0 or 1
{program for process 0}
do true→
    flag[0] := true;
    turn := 0;

    do (flag[1] ∧ turn = 0) → skip od//不需要原子语句，turn要么0要么1，不会死锁；如果是flag引起进入临界区，process 1已经执行完临界区了；如果是turn引起，process 1 会等待：保证互斥

    critical section;
    flag[0] := false;
    non-critical section codes
od
{program for process 1}
do  true →
    flag[1] := true;
    turn := 1;

    do (flag[0] ∧ turn = 1) → skip od;//不需要原子语句

    critical section;
    flag[1] := false;
    non-critical section codes
od
</code></pre><p>多进程拓展版本。跑 $n-1$ 轮，每轮留下一个（最后一个修改 $turn[j]$ 的），最后选出 1 个执行临界区。最高位执行完后，$flag$ 会置 0，剩下 flag 最高的会结束等待，然后按照 轮数递减执行临界区。</p>
<pre tabindex="0"><code>program Peterson n-process;
define flag, turn: array [0.. n − 1] of shared integer;
initially ∀k:flag[k] = 0, and turn = 0
{program for process i}
do true →
    j:=1;
    do j ≠ n − 1
        flag[i] := j;
        turn[j] := i;

        do ((∃k ≠ i: flag[k] ≥ j) ∧ turn[j] = i) → skip od;// （1：选出的执行完后递减执行）∧（每轮修改turn的留下，flag不动）

        j := j + 1;
    od;

    critical section;

    flag[i] := 0;

    non-critical section codes
od
</code></pre><h4 id="test-and-set-原子指令">test-and-set 原子指令</h4>
<p>特殊的原子指令，取得某<code>bool</code>变量值，然后将其置 <code>True/1</code></p>
<pre tabindex="0"><code>program Test-and-set (for any process);
define
    x: shared integer;
    r: integer (private);
initially
    x = 0, r = 1;
do true →

    do r ≠ 0 → TS(r, x) od;

    critical section;
    x := 0
od
</code></pre><h4 id="load-linked-和-store-conditional-原子指令">load-linked 和 store-conditional 原子指令</h4>
<ul>
<li>load-linked $LL(r,x)$：类似普通 load 功能 $r\gets x$，还会对 x 插装</li>
<li>store-conditional $SC(r,x)$：类似 store $x\gets r$，如果 SC 是在其他进程的 LL 后执行后没修改，r 返回成功，反之 x 的值不改变，r 返回失败。LL 和 SC 配合类似 test-and-set</li>
</ul>
<pre tabindex="0"><code>program mutex (for process i);
define x: shared integer; r: integer (private);
initially x = 0;
do true →
try:
    do r ≠ 0 → LL(r, x) od; //critical section is busy
    r = 1; SC(r, x);

    if r = 0 → goto try fi;// SC did not succeed

    critical section;
    x := 0;
    non-critical section codes;
od
</code></pre><h3 id="组同步互斥">组同步互斥</h3>
<p>进程可以属于不同的独立的 forum，按 forum 为单位占有资源 in session。这是单独同步互斥、读写锁等经典问题的推广化。</p>
<ol>
<li>同步互斥：同一时间最多 1 个 forum 在 in session</li>
<li>无死锁：任何时间最少一个进程可以有效行动</li>
<li>有界等待：有成员的 forum 在有界时间内能 in session</li>
<li>同步进入：只要 forum 在 in session，其他有意愿的进程都能加入</li>
</ol>
<h4 id="中心化方案">中心化方案</h4>
<ul>
<li>每个进程拥有一个 $flag\in\{F_i,\perp\}$，中心协调器按顺序读取 flag 信息，安排进入 forum 和 in session</li>
<li>为了防止一个 forum 一直有进入，指定一个 leader（一般是第一个进入的进程），当 leader 退出时 forum 结束 in session</li>
</ul>
<h4 id="去中心化方案">去中心化方案</h4>
<p>每个进程拥有一个 $flag=(state,op),state\in \{request, in\_cs, in\_forum, passive\},op\in\{F,F&rsquo;,\perp\}$。类似于 <a href="#peterson-%E6%96%B9%E6%A1%88">peterson 的 2 进程方案</a>。为了保证想要进入 forum 的都可以，而不是偶尔检查条件被 skip，可以选择第一个进入的为 leader，leader 保证申请的随后进入 forum</p>
<pre tabindex="0"><code>First attempt with two forums F and F′
define  flag: array[1..n − 1] of (state, op), turn ∈ {F, F′}
        state ∈ {request, in_cs, in_forum, passive}
        op ∈ {F, F′, ⊥}
{Program for process i trying to attend forum F}
do ∃j ≠ i: flag[j] = (in_cs, F′) →

    flag[i] := (request, F); //发送请求

    do turn ≠ F ∧ ¬(∀j ≠ i: flag[j].op ≠ F′) → skip od; // (1 F&#39;之前执行完)∧(2 没有要求进入F&#39;的)

    flag[i] := (in_cs, F);//准备进入 forum 的临界区
od;

attend forum F;

turn := F′;
flag[i] := (passive, ⊥)
</code></pre><h2 id="ch-8-distributed-snapshot">ch 8 Distributed Snapshot</h2>
<p>记录分布式系统的单个分布组分的状态信息，收集分散的状态信息在下一章 <a href="#ch-9-global-state-collection">global state collection</a> 介绍。非常有用：死锁检测、程序终止检测、系统回滚等。</p>
<blockquote>
<p>cut 切分</p>
<p>一组事件，而且每个进程至少有一个事件</p>
</blockquote>
<blockquote>
<p>consistent cut</p>
<p>cut，而且对于里面的事件，其因的事件也在 cut 当中： $(a\in C)\wedge(b\prec a)\implies b\in C$</p>
</blockquote>
<blockquote>
<p>consistent</p>
<p>对于一次运行（computation，run，behavior），$\forall a,b, a\prec b$，a 发生在 b 前，就称为 consistent 的，保证 consistent 下可以有多种可能的实际事件顺序，如，交换并行的两个事件执行顺序不会影响运行的 consistent 特性</p>
</blockquote>
<h3 id="chandy-lamport-算法">Chandy-Lamport 算法</h3>
<p>强连通图，信道 FIFO，有一个启动进程 initiator，发生一个 * 标志消息启动记录，每个进程有两种状态，<code>white</code>和<code>red</code>，初始为<code>white</code></p>
<ol>
<li>启动进程原子执行
<ol>
<li>变<code>red</code></li>
<li>记录本地状态</li>
<li>向所有对外信道广播*标志</li>
</ol>
</li>
<li>所有进程在<strong>第一次</strong>接受到*标志后，先做以下原子操作再执行其他任务
<ol>
<li>变<code>red</code></li>
<li>记录本地状态：发送事件和接收事件分别由发送进程和接收进程记录</li>
<li>向所有对外信道广播*标志</li>
</ol>
</li>
</ol>
<p>算法记录最后一次白色+第一次红色事件。由于<strong>白色事件不可能引发红色消息</strong>，实际记录下来的事件顺序必然保持因果关系。</p>
<ul>
<li>算法记录下来的 snapshot state 都是由初始状态可达的，但不保证每次运行都能跑出这个状态</li>
<li>每个对于初始状态可达的最终状态，对算法记录下的 snapshot state 也是可达的：这保证了回滚的正确性</li>
</ul>
<h3 id="lai-yang-算法">Lai-Yang 算法</h3>
<p>对 Chandy-Lamport 的改进，信道不需要 FIFO，消息也附加两种状态，<code>white</code>和<code>red</code>。是一种懒记录方法，主要期待借用已有的各种消息传递。对于程序终止检测（终止后不会再收发任务消息）等需要额外发控制消息。</p>
<ol>
<li>启动进程记录本地状态，任何外发消息为$(msg,red)$</li>
<li>任何进程第一次接受到$(msg,red)$时，先记录本地状态，再处理接收信息</li>
</ol>
<h3 id="分布式-debug">分布式 debug</h3>
<blockquote>
<p>本地状态 $s(i),s(j)$ 对应 consistent 的全局状态</p>
<p>如果本地状态 $s(i),s(j)$ 是由事件 $e_i,e_j$ 引发，那么逻辑时钟关系 $\forall k,VC_k(e_i)\sim VC_k(e_j)$</p>
</blockquote>
<p>对由初始状态可达的 consistent 的全局状态应用判断 $\phi$。这样的判断时间复杂度巨大，需要注意可拓展性：n 个进程每个 m 个可能行动 $O(m^n)$</p>
<ul>
<li>Possibly $\phi$：至少一个为真</li>
<li>Definetly $\phi$：永真 $definetly;\phi \implies possibly; \phi$</li>
<li>Never $\phi$：永假</li>
</ul>
<h2 id="ch-9-global-state-collection">ch 9 Global State Collection</h2>
<p>本章假定底层任务能表现出预期的性质（如检测终止算法中，底层任务确实能终止）</p>
<h3 id="全局广播">全局广播</h3>
<p>假设本地需要被收集的为 $s(i)$,最后每个进程都能收集到 $\forall i:V(i)={s(k):0\le k\le n-1}$。那 naive 的方法就是每次向邻居通知自己新知道的其他进程的信息，直到大家知道全了。消息复杂度：向每个邻居发，每次多一个：$O(n^2)$，全局 $O(n^3)$</p>
<pre tabindex="0"><code>program broadcast (for process i}
define Vi, Wi: set of values;
initially Vi = {s(i)}, Wi = Ø {and every channel is empty}
do Vi ≠ Wi      →   send Vi\Wi to every outgoing channel;
                    Wi:= Vi
[] ¬empty (k,i) →   receive X from channel (k,i);
                    Vi:= Vi ∪ X
od
</code></pre><ul>
<li>$empty(i,j)\implies W_i\subseteq V_j$：归纳法易证，注意到 $W_i^{r+1}=V_i^{r+1},V^{r+1}/W^r_i\subseteq V_j$</li>
<li>停止时候能保证 $\forall i:V(i)={s(k):0\le k\le n-1}$: 由上一条+停止条件 有 $\forall i,j:V_i\subseteq V_j$，显然</li>
<li>有界步终止：必然递增</li>
</ul>
<h3 id="程序终止检测">程序终止检测</h3>
<p>（不一定需要是全局终止，相同步时候也要检测某相结束以开启下一相）</p>
<h4 id="dijstra-scholten-算法">Dijstra-Scholten 算法</h4>
<blockquote>
<p>diffusing computation</p>
<p>由一个 initiator 开启，通知邻居逐步开始的计算</p>
</blockquote>
<ul>
<li>沿方向的消息为 <code>signal</code> ，反向消息为<code>ack</code></li>
<li>环境 environment 节点：只有向外边</li>
<li>内部 internal 节点：从环境节点可达</li>
<li>环境节点起始发<code>signal</code> 开始算法</li>
<li>任何节点第一次收到<code>signal</code> 的发送方为父节点，然后自己开始向邻居广播<code>signal</code></li>
<li>之后收到<code>signal</code> 立刻回复<code>ack</code>，自己邻居都回复了<code>ack</code>后向父节点回复<code>ack</code>，起始节点收完<code>ack</code>即算法结束</li>
<li>对于某条有向边，沿向<code>signal</code>和反向<code>ack</code>数值差为 deficit</li>
<li>对于某个节点：
<ul>
<li>$C$：入边的 deficit 和</li>
<li>$D$：出边的 deficit 和</li>
</ul>
</li>
</ul>
<p>在这样设定下，有如下 2 不变式：</p>
<ol>
<li>$(C\ge 0)\wedge(D\ge 0)$:deficit 定义可知</li>
<li>$(C&gt;0)\vee(D=0)$:（1 等待邻居子图完成）或者是（2 邻居都完成了，可以回复父节点了）</li>
</ol>
<p>注意上述不变式有 $(C&gt;1)\vee(C=1\wedge D=0)$，整个进程之间关系是一棵树。要求信道 FIFO（保证工作信息和检测信息之间正确顺序，防止虚假终止）。在大家确实停止后，消息复杂度 $O(|E|)$（每个信道来去各一次）</p>
<pre tabindex="0"><code>program detect {for an internal node i}
define  C, D : integer
        m: (signal, ack) {represents the type of message received}
        state: (active, passive)
initially C = 0, D = 0, parent(i) = i
do (m = signal) ∧ (C = 0)   → C := 1; state := active;
                                parent := sender
                                //开始准备向邻居广播
    [] m = ack                  → D := D − 1
    [] (C = 1 ∧ D = 0) ∧ (state = passive) → send ack to parent;
                                            C:= 0; parent(i) = i
                                 //节点可以返回初始状态了
    [](m = signal) ∧ (C = 1)    → send ack to the sender
                                // 对多余的signal直接回复ack
od
</code></pre><h4 id="单向环的-token-passing">单向环的 token passing</h4>
<ol>
<li>每个节点 <code>black,white</code>两个状态，初始<code>white</code></li>
<li>向 token 传递反向高的节点发消息后，变<code>black</code></li>
<li><code>white</code>节点传递 token 时颜色不变，<code>black</code>节点传递时染黑 token</li>
<li>节点传递完 token 后变回<code>white</code></li>
<li>initiator 能收发白色 token 即终止</li>
</ol>
<p>算法要求消息通信瞬时（新的消息要追上 token 速度）</p>
<pre tabindex="0"><code>program term {for process i &gt; 0，假定进程0为启动进程}
define  color, token: (black, white) {colors of process and token}
        state : (active, passive)
do  (token = white) ∧ (state ≠ passive)   → skip
    [](token = white) ∧ (state = passive) →
            if color(i) = black → color(i) := white; send a black token
            [] color(i) = white → send a white token
            fi
    [](token = black)   → send a black token
    []i sends a message to a higher numbered process → color(i) :=black
od
{for process 0}
send a white token;
do
(token ≠ white) → send a white token
od
//收回白token 结束
</code></pre><h4 id="信用点分配算法-credit-recovery-algorithm">信用点分配算法 credit-recovery algorithm</h4>
<ul>
<li>$\sum credit(i)=1$</li>
<li>对于活跃进程：$credit(i)&gt;0$</li>
<li>对于休眠进程：$credit(i)=0$</li>
</ul>
<ol>
<li>活跃进程发消息时，将自身$credit/2$ 随消息发出</li>
<li>休眠进程接到消息，转活跃，并对于自身$+=msg_{credit}$</li>
<li>活跃进程收到消息，可以：发回给启动进程，或者为了减少消息数目 保留加到自己的 $credit$</li>
</ol>
<h3 id="浪潮-wave-算法">浪潮 wave 算法</h3>
<blockquote>
<p>wave</p>
<p>一个启动进程某活动，引发邻居活动，进而邻居的邻居活动，此谓浪潮</p>
<ol>
<li>每个计算有界</li>
<li>每个计算至少包括一个确定性事件 decision event</li>
<li>一个确定性事件 decision event 在每个进程中一些事件的因果前</li>
</ol>
</blockquote>
<blockquote>
<p>PIF</p>
<p>Propagation of Information with Feedback，类似于 <a href="#dijstra-scholten-%E7%AE%97%E6%B3%95">Dijstra Scholten 算法</a>里的广播，但是此时返回是副本不是<code>ack</code></p>
</blockquote>
<pre tabindex="0"><code>program PIF {for the initiator node i}
define  count : integer
        N(i): set of neighbors of process i

send M to each neighbor; count := |N(i)|
do
    count ≠ 0 ∧ M received → count: = count − 1
od
{program for a non-initiator node j≠i}
if
    message M received → parent := sender
                        send M to each neighbor except parent;
                        count := |N(j)|;
    []count &gt; 0 ∧ M received → count: = count − 1
    []count = 0              → send M to parent
fi
</code></pre><h2 id="ch-11-coordination-algorithms">ch 11 Coordination Algorithms</h2>
<h2 id="ch-12-fault-tolerant-systems">ch 12 Fault-Tolerant Systems</h2>
<h2 id="ch-13-distributed-consensus">ch 13 Distributed Consensus</h2>
]]></content:encoded></item></channel></rss>