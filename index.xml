<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>zhh's blog</title><link>https://livypad.github.io/</link><description>Recent content on zhh's blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 31 Aug 2022 00:10:00 +0800</lastBuildDate><atom:link href="https://livypad.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>笔记：Designing data-intensive applications(开始记录）</title><link>https://livypad.github.io/post/2022-08-31-ddia/</link><pubDate>Wed, 31 Aug 2022 00:10:00 +0800</pubDate><guid>https://livypad.github.io/post/2022-08-31-ddia/</guid><description>Designing data-intensive applications: the big ideas behind reliable, scalable, and maintainable systems Foundations of Data Systems Data Models SQL：关系型，key-value 对，关联程度一般 文档型：自包含文档，少关联 图数据库：数据大量关联 Storage and Retrival</description><content:encoded><![CDATA[<h1 id="designing-data-intensive-applications-the-big-ideas-behind-reliable-scalable-and-maintainable-systems">Designing data-intensive applications: the big ideas behind reliable, scalable, and maintainable systems</h1>
<h2 id="foundations-of-data-systems">Foundations of Data Systems</h2>
<h3 id="data-models">Data Models</h3>
<ul>
<li>SQL：关系型，key-value 对，关联程度一般</li>
<li>文档型：自包含文档，少关联</li>
<li>图数据库：数据大量关联</li>
</ul>
<h3 id="storage-and-retrival">Storage and Retrival</h3>
<ul>
<li>OLTP 数据存储系统
<ul>
<li>日志结构：追加
<ul>
<li>hash-map：key 对应数据文件当中的位置偏移，只要 key 表能装入内存
<ul>
<li>高性能读写</li>
<li>对大量 key 不友好</li>
<li>区间查询不友好</li>
</ul>
</li>
<li>SSTables：排序字符串表：按顺序合并存储 k-v
<ul>
<li>可以稀疏存储 key</li>
<li>内存维护表，大于表的写进磁盘文件，一个 log 用来数据恢复</li>
</ul>
</li>
</ul>
</li>
<li>原地更新
<ul>
<li>B-Tree：固定大小的段/页组合
<ul>
<li>页大小和底层磁盘契合</li>
<li>覆盖而不是追加</li>
<li>大于页大小时候分裂页</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>OLAP 数据分析系统
<ul>
<li>数据仓库：专门用于数据分析的数据库，是工作用数据库的副本，面向查询
<ul>
<li>事实表：记录事件事实的主表，大，列多</li>
<li>列存储：列太多，一行拆开，每列单独存</li>
<li>列压缩：<code>None</code>值可以被压缩</li>
<li>聚合：面对常见操作预处理</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="encoding">Encoding</h3>
<blockquote>
<p>向前兼容</p>
<p>旧版本可读新版本的数据，一般通过忽略实现</p>
</blockquote>
<blockquote>
<p>向后兼容</p>
<p>新版本可读旧版本数据</p>
</blockquote>
<ul>
<li>语言自带：性能、通用性差、安全问题（代码生成）</li>
<li>文本文件（XML，JSON，CSV）：大，各种数据格式支持弱</li>
<li>二进制编码：小，带有更好的兼容检查支持，自带类型，自带注释</li>
</ul>
<h3 id="dataflow">Dataflow</h3>
<ul>
<li>基于数据库：数据比代码长久，旧版本更新需要忽略新的项</li>
<li>基于服务（web 服务 和 RPC）
<ul>
<li>web 服务：通过 HTTP 向服务器公开的 API 调用服务</li>
<li>RPC：远程调用有网络自身带来新问题，大跨度有兼容性问题</li>
</ul>
</li>
<li>基于消息传递：加入一个消息代理/Actor</li>
</ul>
<h2 id="distributed-data">Distributed Data</h2>
<h3 id="replication">Replication</h3>
<ul>
<li>主从复制
<ul>
<li>分主节点（可读可写）和从节点（只读）</li>
<li>新节点建立：快照+基础上的变更 log</li>
<li>恢复：选举+重新配置</li>
<li>方法
<ul>
<li>基于语句：非确定性语句改为传结果（VM-FT）</li>
<li>基于预写日志 Write-ahead log (WAL)：磁盘字节改变的日志</li>
<li>基于行的逻辑日志：按照修改的逻辑</li>
<li>基于触发器：应用层控制</li>
</ul>
</li>
<li>复制滞后和一致性
<ul>
<li>写后读：个人能读到自己之前的写</li>
<li>单调读：多次读取的版本号不减</li>
<li>前缀一致读：读的顺序取绝于当时写的顺序</li>
</ul>
</li>
</ul>
</li>
<li>多主节点复制
<ul>
<li>场景：多中心、离线工作、协作编辑</li>
<li>需要解决/规避同时写冲突</li>
</ul>
</li>
<li>无主节点复制</li>
</ul>
]]></content:encoded></item><item><title>笔记：Distributed Systems An Algorithmic Approach 2nd（更新到第9章）</title><link>https://livypad.github.io/post/2022-07-09-ghoshdsaaa/</link><pubDate>Sat, 09 Jul 2022 01:31:57 +0800</pubDate><guid>https://livypad.github.io/post/2022-07-09-ghoshdsaaa/</guid><description>Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach Ch 1 introduction Ch 2 interprocess communication naming rpc remote procedure call cloud computing MapReduce ch 3 Models for Communication shared variable 共享变量 linda mobile agent 模型强弱 resequencing protocol, 非 FIFO 模拟 FIFO 共享变量模拟信息传递 信息传递模拟共享变量 信</description><content:encoded><![CDATA[<ul>
<li><a href="#ghosh-sukumar-2014---distributed-systems-an-algorithmic-approach">Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach</a>
<ul>
<li><a href="#ch-1-introduction">Ch 1 introduction</a></li>
<li><a href="#ch-2-interprocess-communication">Ch 2 interprocess communication</a>
<ul>
<li><a href="#naming">naming</a></li>
<li><a href="#rpc-remote-procedure-call">rpc remote procedure call</a></li>
<li><a href="#cloud-computing">cloud computing</a>
<ul>
<li><a href="#mapreduce">MapReduce</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-3-models-for-communication">ch 3 Models for Communication</a>
<ul>
<li><a href="#shared-variable-%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F">shared variable 共享变量</a>
<ul>
<li><a href="#linda">linda</a></li>
<li><a href="#mobile-agent">mobile agent</a></li>
</ul>
</li>
<li><a href="#%E6%A8%A1%E5%9E%8B%E5%BC%BA%E5%BC%B1">模型强弱</a>
<ul>
<li><a href="#resequencing-protocol-%E9%9D%9E-fifo-%E6%A8%A1%E6%8B%9F-fifo">resequencing protocol, 非 FIFO 模拟 FIFO</a></li>
<li><a href="#%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E6%A8%A1%E6%8B%9F%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92">共享变量模拟信息传递</a></li>
<li><a href="#%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%E6%A8%A1%E6%8B%9F%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F">信息传递模拟共享变量</a></li>
<li><a href="#%E4%BF%A1%E9%81%93%E5%88%A4%E7%A9%BA%E7%9A%84%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%80%A7">信道判空的不可能性</a></li>
</ul>
</li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E5%88%86%E7%B1%BB">系统分类</a></li>
<li><a href="#%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E6%95%B0">复杂度计数</a></li>
</ul>
</li>
<li><a href="#ch-4-representing-distributed-algorithms">ch 4 Representing Distributed Algorithms</a>
<ul>
<li><a href="#%E5%85%AC%E6%AD%A3%E6%80%A7">公正性</a></li>
<li><a href="#scheduler">scheduler</a></li>
</ul>
</li>
<li><a href="#ch-5-program-correctness">ch 5 Program Correctness</a>
<ul>
<li><a href="#%E6%96%AD%E8%A8%80%E6%8E%A8%E7%90%86-assertional-reasoning">断言推理 assertional reasoning</a></li>
<li><a href="#%E8%89%AF%E5%9F%BA%E9%9B%86-well-founeded-set">良基集 well-founeded set</a></li>
<li><a href="#%E6%97%B6%E9%97%B4%E9%80%BB%E8%BE%91-temporal-logic">时间逻辑 temporal logic</a></li>
</ul>
</li>
<li><a href="#ch-6-time-in-a-distributed-system">ch 6 Time in a Distributed System</a>
<ul>
<li><a href="#%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F">逻辑时钟</a>
<ul>
<li><a href="#%E5%BC%B1%E6%97%B6%E9%92%9F%E6%9D%A1%E4%BB%B6-%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB-prec">弱时钟条件 偏序关系 $\prec$</a></li>
<li><a href="#%E5%BC%B1%E6%97%B6%E9%92%9F%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F-logic-clock">弱时钟实现的逻辑时钟 logic clock</a></li>
<li><a href="#%E5%BC%BA%E6%97%B6%E9%92%9F%E5%85%B3%E7%B3%BB-%E5%85%A8%E5%BA%8F%E5%85%B3%E7%B3%BB-ll">强时钟关系 全序关系 $\ll$</a></li>
</ul>
</li>
<li><a href="#%E5%90%91%E9%87%8F%E6%97%B6%E9%92%9F-vector-clock">向量时钟 vector clock</a></li>
<li><a href="#%E7%89%A9%E7%90%86%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5">物理时钟同步</a>
<ul>
<li><a href="#berkeley-%E7%AE%97%E6%B3%95-%E5%86%85%E9%83%A8%E5%90%8C%E6%AD%A5">Berkeley 算法 内部同步</a></li>
<li><a href="#lamport-and-melliarsmith-%E7%AE%97%E6%B3%95-%E5%86%85%E9%83%A8%E5%90%8C%E6%AD%A5">Lamport and Melliar–Smith 算法 内部同步</a></li>
<li><a href="#cristian-%E7%AE%97%E6%B3%95-%E5%A4%96%E9%83%A8%E5%90%8C%E6%AD%A5">Cristian 算法 外部同步</a></li>
<li><a href="#ntp-network-time-protocol-%E5%AE%9E%E7%8E%B0">NTP network time protocol 实现</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-7-mutual-exclusion">ch 7 Mutual Exclusion</a>
<ul>
<li><a href="#%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%96%B9%E6%A1%88">消息传递模型的方案</a>
<ul>
<li><a href="#lamport-%E6%96%B9%E6%A1%88">Lamport 方案</a></li>
<li><a href="#ricartagrawala-%E6%96%B9%E6%A1%88">Ricart–Agrawala 方案</a></li>
<li><a href="#maekawa-%E6%96%B9%E6%A1%88">Maekawa 方案</a></li>
</ul>
</li>
<li><a href="#token-passing-%E7%9A%84%E6%96%B9%E6%A1%88">token-passing 的方案</a>
<ul>
<li><a href="#suzukikasami-%E6%96%B9%E6%A1%88">Suzuki–Kasami 方案</a></li>
<li><a href="#raymond-%E6%96%B9%E6%A1%88">Raymond 方案</a></li>
</ul>
</li>
<li><a href="#%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E6%96%B9%E6%A1%88">共享存储的方案</a>
<ul>
<li><a href="#peterson-%E6%96%B9%E6%A1%88-%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">Peterson 方案 不使用原子指令</a></li>
<li><a href="#test-and-set-%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">test-and-set 原子指令</a></li>
<li><a href="#load-linked-%E5%92%8C-store-conditional-%E5%8E%9F%E5%AD%90%E6%8C%87%E4%BB%A4">load-linked 和 store-conditional 原子指令</a></li>
</ul>
</li>
<li><a href="#%E7%BB%84%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5">组同步互斥</a>
<ul>
<li><a href="#%E4%B8%AD%E5%BF%83%E5%8C%96%E6%96%B9%E6%A1%88">中心化方案</a></li>
<li><a href="#%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%96%B9%E6%A1%88">去中心化方案</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#ch-8-distributed-snapshot">ch 8 Distributed Snapshot</a>
<ul>
<li><a href="#chandy-lamport-%E7%AE%97%E6%B3%95">Chandy-Lamport 算法</a></li>
<li><a href="#lai-yang-%E7%AE%97%E6%B3%95">Lai-Yang 算法</a></li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F-debug">分布式 debug</a></li>
</ul>
</li>
<li><a href="#ch-9-global-state-collection">ch 9 Global State Collection</a>
<ul>
<li><a href="#%E5%85%A8%E5%B1%80%E5%B9%BF%E6%92%AD">全局广播</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E7%BB%88%E6%AD%A2%E6%A3%80%E6%B5%8B">程序终止检测</a>
<ul>
<li><a href="#dijstra-scholten-%E7%AE%97%E6%B3%95">Dijstra-Scholten 算法</a></li>
<li><a href="#%E5%8D%95%E5%90%91%E7%8E%AF%E7%9A%84-token-passing">单向环的 token passing</a></li>
<li><a href="#%E4%BF%A1%E7%94%A8%E7%82%B9%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95-credit-recovery-algorithm">信用点分配算法 credit-recovery algorithm</a></li>
</ul>
</li>
<li><a href="#%E6%B5%AA%E6%BD%AE-wave-%E7%AE%97%E6%B3%95">浪潮 wave 算法</a></li>
</ul>
</li>
<li><a href="#ch-11-coordination-algorithms">ch 11 Coordination Algorithms</a></li>
<li><a href="#ch-12-fault-tolerant-systems">ch 12 Fault-Tolerant Systems</a></li>
<li><a href="#ch-13-distributed-consensus">ch 13 Distributed Consensus</a></li>
</ul>
</li>
</ul>
<h1 id="ghosh-sukumar-2014---distributed-systems-an-algorithmic-approach">Ghosh, Sukumar (2014) - Distributed Systems An Algorithmic Approach</h1>
<p>一本高屋建瓴讨论分布式里面重要问题的书。这篇笔记主要就是结合我的理解复述一下书里的我感觉比较重要内容的流水账。</p>
<h2 id="ch-1-introduction">Ch 1 introduction</h2>
<p>特征</p>
<ol>
<li>多进程</li>
<li>进程间通讯</li>
<li>分离地址空间</li>
<li>单任务</li>
</ol>
<p>使用分布式的原因</p>
<ul>
<li>地理分离</li>
<li>加速</li>
<li>远端资源共享</li>
<li>容错</li>
</ul>
<p>一般的问题</p>
<ol>
<li>leader 选举</li>
<li>互斥</li>
<li>时钟同步</li>
<li>全局状态</li>
<li>组播</li>
<li>副本管理</li>
</ol>
<h2 id="ch-2-interprocess-communication">Ch 2 interprocess communication</h2>
<h3 id="naming">naming</h3>
<p>位置无关，方便定位实体。一般是文本形式，树状结构</p>
<h3 id="rpc-remote-procedure-call">rpc remote procedure call</h3>
<ul>
<li>机器差异（大小端，指针和地址）</li>
<li>阻塞/非阻塞</li>
<li>丢包：at-least-once/at-most-once,exactly once</li>
</ul>
<table>
<thead>
<tr>
<th>Client Stub</th>
<th>Server Stub</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pack parameters into a message，Send message to remote machine</td>
<td>Do no message → skip od ，Unpack the call parameters</td>
</tr>
<tr>
<td>Do no result → skip od*，Receive result and unpack it</td>
<td>Call the server procedure Receive result and unpack it Pack result into a message</td>
</tr>
<tr>
<td>Return to the client program</td>
<td>Send it to the client</td>
</tr>
</tbody>
</table>
<h3 id="cloud-computing">cloud computing</h3>
<ul>
<li>software-as-a-service, SaaS
<ul>
<li>Google doc，云盘等</li>
</ul>
</li>
<li>platform-as-a-service, PaaS
<ul>
<li>小程序 API（？</li>
</ul>
</li>
<li>infrastructure-as-a-service, IaaS
<ul>
<li>elastic computing cloud， EC2 云服务器</li>
</ul>
</li>
</ul>
<h4 id="mapreduce">MapReduce</h4>
<p>Map: 〈<em>key, value</em>〉→ list of 〈<em>key, value</em>〉</p>
<p>{This is the intermediate 〈key, value〉 pair}</p>
<p>Reduce: 〈<em>key, list of values</em>〉 → list of 〈<em>key, value</em>〉</p>
<h2 id="ch-3-models-for-communication">ch 3 Models for Communication</h2>
<blockquote>
<p>本书的可靠信道公理 channel</p>
<ol>
<li>所有发出消息都被接收方收到，所有收到消息都有发送者
<ul>
<li>对数据链路/传输层不适用，需要恢复</li>
</ul>
</li>
<li>每条信息都有一条任意，有限长，非零延迟
<ul>
<li>为了放宽对不同延迟的支持</li>
</ul>
</li>
<li>信道呈现 FIFO 特性
<ul>
<li>电报 datagram 网络乱序</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="shared-variable-共享变量">shared variable 共享变量</h3>
<blockquote>
<p>DSM</p>
<p>distribted shared memory，方便使用共享变量有关的编程工具</p>
</blockquote>
<ol>
<li>state reading/locally shared variable 读取自身和邻居状态，只能修改自己状态</li>
<li>link register 链路自带单读者单写者寄存器</li>
</ol>
<h4 id="linda">linda</h4>
<p>共享的 tuple space</p>
<table>
<thead>
<tr>
<th>原语</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>IN，INP</td>
<td>取出 tuple，分阻塞、非阻塞版本</td>
</tr>
<tr>
<td>OUT</td>
<td>放入 tuple</td>
</tr>
<tr>
<td>RD，RDP</td>
<td>读 tuple，类比 in 不删除。分阻塞、非阻塞版本</td>
</tr>
<tr>
<td>EVAL</td>
<td>创建新进程</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/** main program**/</span>
</span></span><span class="line"><span class="cl"><span class="n">real_main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">argc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">nslave</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">hello</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">nslave</span> <span class="o">=</span> <span class="n">atoi</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nslave</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    	<span class="n">EVAL</span> <span class="p">(</span><span class="s">&#34;slave&#34;</span><span class="p">,</span> <span class="n">hello</span><span class="p">(</span><span class="n">j</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nslave</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    	<span class="n">IN</span><span class="p">(</span><span class="s">&#34;done&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Task completed.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/** subroutine hello **/</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hello</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Task from number %d.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUT</span><span class="p">(</span><span class="s">&#34;done&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="mobile-agent">mobile agent</h4>
<p>移动执行的代码</p>
<p>(I, P, B)</p>
<ul>
<li>I 标识符</li>
<li>P 对应代码</li>
<li>B 代码的变量</li>
</ul>
<h3 id="模型强弱">模型强弱</h3>
<p>强模型限制多，操作多；强模型模拟弱模型容易，反之可能困难</p>
<h4 id="resequencing-protocol-非-fifo-模拟-fifo">resequencing protocol, 非 FIFO 模拟 FIFO</h4>
<p>缓存再发送。可以优化为环形缓存编号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">{Sender process P}
</span></span><span class="line"><span class="cl">var i : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">    send m[i],i to Q;
</span></span><span class="line"><span class="cl">    i := i+1;
</span></span><span class="line"><span class="cl">forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{Receiver process Q}
</span></span><span class="line"><span class="cl">var k : integer {initially 0}
</span></span><span class="line"><span class="cl">buffer : buffer [0..∞] of message
</span></span><span class="line"><span class="cl">{initially for all k:buffer[k] = null}
</span></span><span class="line"><span class="cl">repeat{store}
</span></span><span class="line"><span class="cl">	receive m[i],i from P;
</span></span><span class="line"><span class="cl">    store m[i] into buffer[i];
</span></span><span class="line"><span class="cl">    {deliver}
</span></span><span class="line"><span class="cl">    while buffer[k] ≠ null do
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">        deliver the content of buffer [k];
</span></span><span class="line"><span class="cl">        buffer [k] := null; k := k+1;
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="共享变量模拟信息传递">共享变量模拟信息传递</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">shared var p, q: integer {initially p = q}
</span></span><span class="line"><span class="cl">buffer: array [0..max-1] of message
</span></span><span class="line"><span class="cl">{Sender process P}
</span></span><span class="line"><span class="cl">var s: array of messages sent by P, i : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">	if p ≠ q − 1 mod max then
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">    	buffer[p] := s[i]; i := i + 1; p := p + 1 mod max
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{Receiver process Q}
</span></span><span class="line"><span class="cl">var r: array of messages received by Q, j : integer {initially 0}
</span></span><span class="line"><span class="cl">repeat
</span></span><span class="line"><span class="cl">    if q ≠ p mod max then
</span></span><span class="line"><span class="cl">    begin
</span></span><span class="line"><span class="cl">    	r[j] := buffer[q]; j := j + 1; q := q + 1 mod max
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">forever
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="信息传递模拟共享变量">信息传递模拟共享变量</h4>
<p>下列实现错误：</p>
<ol>
<li>组播不 atmoic，atmoic 组播有代价</li>
<li>组播不一定遵循更新变量顺序</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">{Implementing shared memory by message passing: first attempt}
</span></span><span class="line"><span class="cl">{read X by process i}
</span></span><span class="line"><span class="cl">read x[i] x[i] := v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{write X := v by process i}
</span></span><span class="line"><span class="cl">x[i] := v
</span></span><span class="line"><span class="cl">Multicast v to every other process j (j ≠ i) in the system;
</span></span><span class="line"><span class="cl">Process j (j ≠ i), after receiving the multicast, sets x[j] to v.
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="信道判空的不可能性">信道判空的不可能性</h4>
<p>如果进程<code>i,j</code>之间信道需要判空</p>
<ul>
<li>已知<code>i,j</code>之间最大时延 T，等待 T</li>
<li>未知最大时延，初始信道可以包含任意信息，无法判空（即使使用一个清零帧）</li>
</ul>
<h3 id="系统分类">系统分类</h3>
<ul>
<li>reactive：反应性，对请求响应</li>
<li>transformational：转移性，存在初态和末态</li>
<li>named：和处理器标识有关</li>
<li>anonymous：和处理器标识无关，即使标识改变可以继续运行，需要如随机数等机制打破对称性</li>
</ul>
<h3 id="复杂度计数">复杂度计数</h3>
<ul>
<li>空间复杂度：按 node 数目的增长要求的空间</li>
<li>时间复杂度
<ul>
<li>总步数</li>
<li>总轮次 round：最远端的执行一次是一轮</li>
</ul>
</li>
</ul>
<h2 id="ch-4-representing-distributed-algorithms">ch 4 Representing Distributed Algorithms</h2>
<blockquote>
<p>guard</p>
<p>断言，条件执行，如果多个断言判正确，由 scheduler 决定执行任意一个代码段，下面假定每个代码段原子执行</p>
</blockquote>
<p>程序终止条件</p>
<ol>
<li>每个进程终止，guard 全判<code>false</code></li>
<li>无消息还在传递</li>
</ol>
<p>类似如下的伪代码和对应的 Rust 实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">program uncertain;
</span></span><span class="line"><span class="cl">define x : integer;
</span></span><span class="line"><span class="cl">initially x = 0
</span></span><span class="line"><span class="cl">do
</span></span><span class="line"><span class="cl">  x &lt; 4 → x := x + 1
</span></span><span class="line"><span class="cl">  [] x = 3 → x := 0
</span></span><span class="line"><span class="cl">od
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rand</span>::<span class="n">Rng</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="n">atomic</span>::<span class="p">{</span><span class="n">AtomicUsize</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">static</span><span class="w"> </span><span class="n">CNT</span>: <span class="nc">AtomicUsize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">AtomicUsize</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">CNT</span><span class="p">.</span><span class="n">store</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">Relaxed</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">the</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">the</span><span class="p">(</span><span class="n">i</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">CNT</span><span class="p">.</span><span class="n">fetch_add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">Ordering</span>::<span class="n">Relaxed</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">guess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand</span>::<span class="n">thread_rng</span><span class="p">().</span><span class="n">gen_range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">guess</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="mi">0</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">the</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">(</span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;terminate in {:?}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">CNT</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="公正性">公正性</h3>
<p>由于 guarded action 的选择依赖 scheduler （调度器） 决定，scheduler 需要考虑公平性</p>
<ul>
<li>无条件公平：每个代码段最终会进入调度队列，无论 guard 值</li>
<li>弱公平：只要代码段的 guard 变为并保持 <code>true</code>就最终会进入调度队列</li>
<li>强公平：只要代码段的 guard 能无限次经常变为<code>true</code>就最终会进入调度队列，弱公平能跑出的顺序，强公平一定能跑出，反之不一定</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">program test
</span></span><span class="line"><span class="cl">define
</span></span><span class="line"><span class="cl">x: integer {initial value undefined}
</span></span><span class="line"><span class="cl">do
</span></span><span class="line"><span class="cl">  true → x := 0
</span></span><span class="line"><span class="cl">  [] x = 0 → x := 1
</span></span><span class="line"><span class="cl">  [] x = 1 → x := 2
</span></span><span class="line"><span class="cl">od
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>不公平时可能只执行第 1 条</li>
<li>弱公平时只保证执行第 1、2 条（一直执行第 1 条会保证 x=0 从而执行 2，但 x=1 时可以只执行第 1 条而使得第 3 条永不满足）</li>
</ul>
<h3 id="scheduler">scheduler</h3>
<blockquote>
<p>central scheduler</p>
<p>又名 serial scheduler：原子的调度执行 guard 对应的代码段，简单，可以用 token 传递实现，拓展性差，并行度差，是分布式 scheduler 的退化情形</p>
<p>有关的 Theorem：</p>
<ol>
<li>算法在 central scheduler 下正确</li>
<li>已为<code>true</code> 的 guard 不会被其他代码段修改为<code>false</code></li>
</ol>
<p>=&gt;在 distributed scheduler 下正确</p>
</blockquote>
<h2 id="ch-5-program-correctness">ch 5 Program Correctness</h2>
<blockquote>
<p>安全 safety 条件</p>
<p>&ldquo;bad things never happen.&rdquo;</p>
</blockquote>
<p>如：</p>
<ul>
<li>同步互斥：至多一个进程在临界区</li>
<li>有限容量信道：$nC\le nP\le nC+B$</li>
<li>读写锁：$(nW\le 1 \wedge nR=0) \vee (nW=0\wedge nR\ge 0)$</li>
<li>无死锁：$Q\wedge GG$</li>
<li>部分正确性：如果不死锁，必得正确结果 $\neg GG\implies Q$</li>
</ul>
<blockquote>
<p>活跃 liveness 条件</p>
<p>&ldquo;good things eventually happen.&rdquo;</p>
</blockquote>
<p>如：</p>
<ul>
<li>进行：对于同步互斥问题，不死锁，不活锁（声明了临界区，最终总能获得机会）</li>
<li>公平性：有限时间后 schduler 总会调度</li>
<li>可达性：是否可以从初始状态 $S_0$ 到达状态 $S_k$</li>
<li>终止：部分正确+终止状态可达</li>
</ul>
<h3 id="断言推理-assertional-reasoning">断言推理 assertional reasoning</h3>
<p>用于证明安全性。构造不变式 $I$ 代表安全性条件（类似数学归纳法）</p>
<ol>
<li>初态不变式 $I$满足</li>
<li>假定前状态不变式 $I$满足，任何执行后不变式 $I$ 仍然满足</li>
</ol>
<h3 id="良基集-well-founeded-set">良基集 well-founeded set</h3>
<p>用于证明活跃性。一个映射（测量函数/变化函数 measured/variant function）从系统全局状态到一个 well-founed set $f:S\to WF$</p>
<blockquote>
<p>well-founded set</p>
<p>对于 $WF=\{w_1,w_2,&hellip;\}$ ，上面有个全序关系$\gg$</p>
<ol>
<li>不存在无穷比较链 $w_1\gg w_2 \gg &hellip;$</li>
<li>系统状态从 $s_1$ 到 $s_2$ ，有 $w_1=f(s_1),w_2=f(s_2) \implies w_1 \gg w_2$</li>
</ol>
</blockquote>
<p>一般 well-founed set 会选择非负整数集，0 就是终止状态，全序关系就是大于；也有选择 set 是一组元素，全序关系是字典顺序。</p>
<h3 id="时间逻辑-temporal-logic">时间逻辑 temporal logic</h3>
<ul>
<li>$\Box P$ 意思是 $P$ 永真</li>
<li>$\lozenge P$ 意思是 $P$ 最终会变为真</li>
</ul>
<p>有</p>
<ol>
<li>$\lozenge P=\neg \Box (\neg P)$：P 假不是一直不真的=P 假最终会不真</li>
<li>$\Box P\wedge \Box Q=\Box (P\wedge Q)$</li>
<li>$\Box P\vee \Box Q=\Box (P\vee Q)$</li>
<li>$\lozenge\Box P\implies \Box \lozenge P$：P 最终会一直真推出 P 会一直经常真（强公平蕴含弱公平）</li>
<li>$\lozenge P\wedge \lozenge Q=\lozenge (P\wedge Q)$</li>
<li>$\lozenge P\vee \lozenge Q=\lozenge (P\vee Q)$</li>
<li>$\lozenge P\vee Q\neq \lozenge (P\vee Q)$: <strong>注意：</strong> 如果 $Q=\neg P$，右边永真，左边可以为假</li>
</ol>
<h2 id="ch-6-time-in-a-distributed-system">ch 6 Time in a Distributed System</h2>
<h3 id="逻辑时钟">逻辑时钟</h3>
<h4 id="弱时钟条件-偏序关系-prec">弱时钟条件 偏序关系 $\prec$</h4>
<ol>
<li>同一进程里，a 在 b 后发生，$a\prec b$</li>
<li>两个进程通讯，i 进程的 a 发送，j 进程 b 接受，$a\prec b$</li>
<li>$(a\prec b)\wedge(b\prec c)\implies (a\prec c)$</li>
</ol>
<h4 id="弱时钟实现的逻辑时钟-logic-clock">弱时钟实现的逻辑时钟 logic clock</h4>
<ol>
<li>每个本地事件发生，$LC$ 递增 1</li>
<li>发送消息时附上当前 $LC$ 作为时间戳</li>
<li>接受到消息时 $LC=1+\max(local; LC, message; LC)$</li>
</ol>
<p>此时可以保证，但是反之不成立。逻辑时钟不能完全和因果关系互推，需要<a href="#%E5%90%91%E9%87%8F%E6%97%B6%E9%92%9F-vector-clock">向量时钟</a>。</p>
<p>$a\prec b\implies LC(a)&lt;LC(b)$</p>
<h4 id="强时钟关系-全序关系-ll">强时钟关系 全序关系 $\ll$</h4>
<p>$a\ll b$ 成立条件</p>
<ul>
<li>要么$LC(a)&lt;LC(b)$</li>
<li>要么不同进程，事件 a、b 对应进程 i、j，有 $LC(a)=LC(b),i&lt;j$</li>
</ul>
<h3 id="向量时钟-vector-clock">向量时钟 vector clock</h3>
<p>从事件集到进程数大小(假定为 n)的非负整数向量的函数 $VC:V\to A$。事件 a、b 的向量时钟之间大小关系$VC(a)&lt;VC(b)$的充要条件为</p>
<ol>
<li>$\forall i:i\in [0,n-1]:VC_i(a)\le VC_i(b)$</li>
<li>$\exists j\in[0,n-1]:VC_j(a)&lt;VC_j(b)$</li>
</ol>
<p>如果两个事件之间向量时钟既不大于也不小于，认为事件同时，记作$a\parallel b$。向量时钟保证了因果检测，即 $a\prec b \iff VC(a)&lt;VC(b)$ 。实现要求：</p>
<ol>
<li>进程 i 本地事件发生时候 $VC_i[i]+=1$</li>
<li>发送信息时附带整个向量时钟</li>
<li>进程 j 收到消息附带时间戳 $T$ 时，先更新本地 $VC_j[j]+=1$ ，再更新全局 $\forall k \in [0,n-1]:VC_k[j]=\max(T_k,VC_k[j])$</li>
</ol>
<h3 id="物理时钟同步">物理时钟同步</h3>
<ol>
<li>外部时钟同步：和 UTC/原子钟/GPS 同步时间。可以借助 NTP（network time protocol）协议</li>
<li>内部时钟同步：在即使内部少数错误时钟下仍然同步时间，只需要内部相互同步即可，注意一般通过调快/调慢实现以防止突变</li>
<li>相同步</li>
<li>有界时钟：只能通过加位数保证可预见未来不溢出</li>
</ol>
<ul>
<li>偏移率 drift rate：内部时钟和理想时钟走时速度不完全相等：$(1-\rho)\le \frac{\rm{d}C}{\rm{d}t}\le(1+\rho)$</li>
<li>时钟偏差 clock skew：时钟之间最大允许读数偏差 $\delta$</li>
<li>重同步间隔 resynchronization interval ：$R$</li>
</ul>
<h4 id="berkeley-算法-内部同步">Berkeley 算法 内部同步</h4>
<p>选择一个 leader 收集计算各个内部时钟的平均值，并按此调整</p>
<h4 id="lamport-and-melliarsmith-算法-内部同步">Lamport and Melliar–Smith 算法 内部同步</h4>
<p>去中心化的算法。可以应对 two-faced clock 问题。$c_k[i]$ 表示时钟 i 读取时钟 k 得到的值。</p>
<blockquote>
<p>two-faced clock</p>
<p>2 个非错时钟向 two-faced 时钟读数结果不一致</p>
</blockquote>
<ol>
<li>读系统中每个时钟的值</li>
<li>将离群值丢弃,用本地值代替： $|c_i[i]-c_j[i]|&gt;\delta \implies c_j[i]\gets c_i[i]$</li>
<li>使用处理后的平均值覆盖本地时钟值</li>
</ol>
<p>对于 n 个时钟，只要 two-faced clock 数目 t 有 $n&gt;3t$ 就能保证同步。</p>
<p>考虑 3 个时钟，i、j 好，k 为 two-faced clock。有如下配置</p>
<ul>
<li>$c_i[i]=c$</li>
<li>$c_j[j]=c-\delta$</li>
<li>$c_k[i]=c+\delta$</li>
<li>$c_k[j]=c-2\delta$</li>
</ul>
<p>这时候 i、j 平均值差为 $\frac{3t\delta}{n}$。如果 $n&gt;3t$ 就有$\frac{3t\delta}{n}&lt;\delta$。同步间隔 $R\le(\delta -\frac{3t\delta}{n})/\rho$</p>
<h4 id="cristian-算法-外部同步">Cristian 算法 外部同步</h4>
<p>每个 client 向有精确时钟的 time server 定时通信来同步时钟： $R&lt;\frac{\delta}{2\rho}$。</p>
<blockquote>
<p>round-trip time</p>
<p>每次同步通过发起 RPC，用来度量信号延迟：$RTT=T_2-T_1$</p>
</blockquote>
<p>每次时钟修正为 $T_s+\frac{RTT}{2}=T_s+\frac{T_2-T_1}{2}$。但实际网络波动，返回时间是一个区间，记最短用时 $min$，对应同步精度 $\pm(\frac{T_2-T_1}{2}-min)$</p>
<h4 id="ntp-network-time-protocol-实现">NTP network time protocol 实现</h4>
<p>按层级 stratum 组织各计算机，stratum 0 对应直连高精度时钟，stratum $i$ 作为 $i+1$ 的 time server，精度随着层级增加递减。</p>
<ul>
<li>组播：使用 UDP 协议定期发送</li>
<li>RPC：使用 <a href="#cristian-%E7%AE%97%E6%B3%95-%E5%A4%96%E9%83%A8%E5%90%8C%E6%AD%A5">Cristian 算法</a></li>
<li>P2P 通信：同层级的 time server 互相同步保持精度。设 Q 在 P 之前$\delta$，互相发报：$T_2=T_1+T_{PQ}+\delta,T_4=t_3+T_{QP}-\delta$，则有 $\delta=\frac{T_2-T_4-T_1+T_3}{2}-\frac{T_{PQ}-T_{QP}}{2},RTT=T_{PQ}+T_{QP}=T_2+T_4-T_1-T_3$， 这时候两个时钟误差$\delta$就可以控制在 $\frac{T_2-T_4-T_1+T_3}{2}\pm\frac{RTT}{2}$ 里面（注意到 $T_{PQ},T_{QP}&gt;0$，相减的值可以由 RTT 控制）</li>
</ul>
<h2 id="ch-7-mutual-exclusion">ch 7 Mutual Exclusion</h2>
<p>3 个基本要求</p>
<ol>
<li>同步互斥 Mutual exclusion：至多一个进程在临界区，这是安全性性质</li>
<li>不死锁 Freedom from deadlock：至少一个进程可以运行和进入临界区，也是安全性性质</li>
<li>进展 Progress：每个尝试进入临界区的进程最终总能进入，这是活跃性性质</li>
</ol>
<blockquote>
<p>livelock/starvation</p>
<p>违反性质 3。进程一直被阻止进入临界区</p>
</blockquote>
<blockquote>
<p>FIFO fairness，FIFO 公平</p>
<p>进入临界区的顺序按照申请的顺序，类似 FIFO 队列。注意是申请的时间而不是申请到达 central coordinator（如果采用中心化的算法）的时间，所以一般世俗机构的办事先到先得不是 FIFO fairness</p>
</blockquote>
<h3 id="消息传递模型的方案">消息传递模型的方案</h3>
<p>下面算法一般要求发送消息时间戳。注意到如果只考虑同步互斥问题，时间戳最大差 $(n-1)$，因此可以选择 $\mathrm{mod}(2n-1)$ 的时间戳，有效规避无界时钟问题（详见 <a href="#%E7%89%A9%E7%90%86%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5">物理时钟章节</a> ）。</p>
<h4 id="lamport-方案">Lamport 方案</h4>
<ul>
<li>全连接网络</li>
<li>信道 FIFO，不丢信息</li>
<li>每个进程维护一个队列 Q</li>
<li>3 特性+FIFO 公平，一轮需要 $3(n-1)$ 次消息传递</li>
</ul>
<ol>
<li>期望进入临界区的进程广播带时间戳<code>request</code></li>
<li>接受到<code>request</code>的进程
<ol>
<li>不在临界区：回复 <code>ack</code></li>
<li>在临界区：直到退出临界区再回复<code>ack</code></li>
</ol>
</li>
<li>进入临界区条件：
<ol>
<li>检查本地队列 Q 自己的请求最早</li>
<li>其他进程都回复了<code>ack</code></li>
</ol>
</li>
<li>退出临界区时：
<ol>
<li>删除本地队列 Q 中自己的请求</li>
<li>广播带时间戳<code>release</code></li>
</ol>
</li>
<li>收到<code>release</code>后进程删除对应的请求</li>
</ol>
<h4 id="ricartagrawala-方案">Ricart–Agrawala 方案</h4>
<ul>
<li>不需要维护本地队列</li>
<li>只是更多的缓存请求.对时间戳晚于自己的请求，当时不在临界区时：
<ul>
<li>Lamport 方案回复</li>
<li>Ricart–Agrawala 方案缓存</li>
</ul>
</li>
<li>3 特性+FIFO 公平，一轮需要 $2(n-1)$ 次消息传递</li>
</ul>
<ol>
<li>期望进入临界区的进程广播带时间戳<code>request</code></li>
<li>接受到<code>request</code>的进程回复 <code>ack</code> 条件，反之缓存请求
<ul>
<li>该进程不准备进入临界区</li>
<li>该进程期望进入的时间戳晚于对应的<code>request</code></li>
</ul>
</li>
<li>进入临界区条件其他进程都回复了<code>ack</code></li>
<li>退出临界区执行其他操作前，对等待的请求回复<code>ack</code></li>
</ol>
<h4 id="maekawa-方案">Maekawa 方案</h4>
<p>每个进程 i 属于单独的通信组 $S_i$。组内互相监督满足临界区，只要组的覆盖足够好，就可以减少通信支出。大概为 $3\sqrt{n}=O(\sqrt{n})$</p>
<ol>
<li>$\forall i,j\in [0,n-1],S_i\cap S_j\neq \varnothing$：保证全局覆盖</li>
<li>$i\in S_i$：自身也被监督</li>
<li>最好的，每个进程属于通信组的次数相同（有对称性）</li>
</ol>
<blockquote>
<p>global FIFO</p>
<p>每个进程严格按照发送时间戳接受消息：极难实现</p>
</blockquote>
<ul>
<li>global FIFO 成立时
<ol>
<li>期望进入临界区的进程对 $S_i$ 广播带时间戳<code>request</code></li>
<li>对时间戳最早的请求回复<code>ack</code>，锁住，其他请求排在队列中；如果进程在临界区里，退出时再进行</li>
<li>进入临界区条件：收到 $S_i$ 中每个进程的 <code>ack</code></li>
<li>退出临界区时对 $S_i$ 广播<code>release</code></li>
<li>接收到<code>release</code>后从队列剔除对应请求，解锁，重复<code>步骤2</code></li>
</ol>
</li>
<li>没有 global FIFO，可能会因为循环等 <code>ack</code> 导致死锁，需要添加放弃机制
<ol>
<li>期望进入临界区的进程对 $S_i$ 广播带时间戳<code>request</code></li>
<li>不在临界区时接受到请求：</li>
<li>未锁：对时间戳最早的请求回复<code>ack</code>，锁定</li>
<li>已锁，新请求的时间戳更晚：回复<code>failed</code></li>
<li>已锁，新请求的时间戳更早：排队请求，对之前锁定请求的发送方发<code>inquire</code>，可能会重排顺序</li>
<li>进入临界区条件：收到 $S_i$ 中每个进程的 <code>ack</code>
<ul>
<li>如果收到 <code>inquire</code> 还接受到了<code>failed</code>，对 $S_i$ 广播 <code>relinquish</code> 放弃排期自己的请求</li>
<li>如果只收到 <code>inquire</code> 可以忽略</li>
</ul>
</li>
<li>退出临界区时对 $S_i$ 广播<code>release</code></li>
<li>接收到<code>release</code>后从队列剔除对应请求，解锁，重复<code>步骤2</code></li>
<li>已锁，接受到<code>relinquish</code>，重排队列，对时间戳最早的发<code>ack</code></li>
</ol>
</li>
</ul>
<h3 id="token-passing-的方案">token-passing 的方案</h3>
<h4 id="suzukikasami-方案">Suzuki–Kasami 方案</h4>
<p>全连接网络。初始有个进程拥有 token。期望进入临界区的进程 $i$ 广播带序列号的消息 $(i,num)$。拿到 token 即允许进入临界区。每个进程有本地队列 Q 和本地向量</p>
<ul>
<li>$req[0,&hellip;,n-1]$ 记录对应进程最近请求序列号</li>
<li>$last[0,&hellip;,n-1]$ 记录对应进程进入临界区次数</li>
</ul>
<p>进程 $i$ 拿到 token 后</p>
<ol>
<li>$last[i]\gets num$</li>
<li>将满足 $1+last[k]=req[k]$ 的每个进程 k 加入本地队列 Q</li>
<li>执行临界区</li>
<li>取出 Q 第一项传递 token</li>
</ol>
<p>对应消息总数 $(n-1)+1$（发出 $n-1$，接收 1 条 token）</p>
<h4 id="raymond-方案">Raymond 方案</h4>
<p>关系组织成树。每个进程有一个本地队列。一般的，树之间节点距离就是通信开销 $O(\log{n})$</p>
<ol>
<li>节点拥有 token 时候为树的根，并可以进去临界区，反之将自己的请求加入自己本地队列</li>
<li>节点没有 token，本地队列非空时给父节点发送请求，除非已经发送并在等待</li>
<li>根节点结束临界区，收到请求时，给本地队列第一项的邻居传递 token，并改为指向该邻居，该邻居变成根节点</li>
<li>接受到 token 时候，向本地队列第一项的邻居继续传递，并删除对应的请求，改为指向该邻居，如果队列中还有请求，向新的父节点发送请求</li>
</ol>
<h3 id="共享存储的方案">共享存储的方案</h3>
<p>一般依靠原子指令：</p>
<ul>
<li>compare-and-swap (CAS)：比较预期值和内存变量，相等时候改为新传入的值，反之不修改，返回执行之后的内存变量值</li>
<li>fetch-and-add(FA)：原子加</li>
<li>semaphore 信号量：非负整数支持原子操作，可以对应资源个数
<ul>
<li>$P(s)\triangleq\{waituntil; s&gt;0\implies s-=1\}$：申请资源，取得后可用资源-1</li>
<li>$V(s)\triangleq\{s+=1\}$：释放资源，可用资源+1</li>
</ul>
</li>
</ul>
<h4 id="peterson-方案-不使用原子指令">Peterson 方案 不使用原子指令</h4>
<p>2 个进程版本</p>
<pre tabindex="0"><code>program peterson;
define flag[0], flag[1] shared Boolean;
turn: shared integer
initially flag[0] = false, flag[1] = false, turn = 0 or 1
{program for process 0}
do true→
    flag[0] := true;
    turn := 0;

    do (flag[1] ∧ turn = 0) → skip od//不需要原子语句，turn要么0要么1，不会死锁；如果是flag引起进入临界区，process 1已经执行完临界区了；如果是turn引起，process 1 会等待：保证互斥

    critical section;
    flag[0] := false;
    non-critical section codes
od
{program for process 1}
do  true →
    flag[1] := true;
    turn := 1;

    do (flag[0] ∧ turn = 1) → skip od;//不需要原子语句

    critical section;
    flag[1] := false;
    non-critical section codes
od
</code></pre><p>多进程拓展版本。跑 $n-1$ 轮，每轮留下一个（最后一个修改 $turn[j]$ 的），最后选出 1 个执行临界区。最高位执行完后，$flag$ 会置 0，剩下 flag 最高的会结束等待，然后按照 轮数递减执行临界区。</p>
<pre tabindex="0"><code>program Peterson n-process;
define flag, turn: array [0.. n − 1] of shared integer;
initially ∀k:flag[k] = 0, and turn = 0
{program for process i}
do true →
    j:=1;
    do j ≠ n − 1
        flag[i] := j;
        turn[j] := i;

        do ((∃k ≠ i: flag[k] ≥ j) ∧ turn[j] = i) → skip od;// （1：选出的执行完后递减执行）∧（每轮修改turn的留下，flag不动）

        j := j + 1;
    od;

    critical section;

    flag[i] := 0;

    non-critical section codes
od
</code></pre><h4 id="test-and-set-原子指令">test-and-set 原子指令</h4>
<p>特殊的原子指令，取得某<code>bool</code>变量值，然后将其置 <code>True/1</code></p>
<pre tabindex="0"><code>program Test-and-set (for any process);
define
    x: shared integer;
    r: integer (private);
initially
    x = 0, r = 1;
do true →

    do r ≠ 0 → TS(r, x) od;

    critical section;
    x := 0
od
</code></pre><h4 id="load-linked-和-store-conditional-原子指令">load-linked 和 store-conditional 原子指令</h4>
<ul>
<li>load-linked $LL(r,x)$：类似普通 load 功能 $r\gets x$，还会对 x 插装</li>
<li>store-conditional $SC(r,x)$：类似 store $x\gets r$，如果 SC 是在其他进程的 LL 后执行后没修改，r 返回成功，反之 x 的值不改变，r 返回失败。LL 和 SC 配合类似 test-and-set</li>
</ul>
<pre tabindex="0"><code>program mutex (for process i);
define x: shared integer; r: integer (private);
initially x = 0;
do true →
try:
    do r ≠ 0 → LL(r, x) od; //critical section is busy
    r = 1; SC(r, x);

    if r = 0 → goto try fi;// SC did not succeed

    critical section;
    x := 0;
    non-critical section codes;
od
</code></pre><h3 id="组同步互斥">组同步互斥</h3>
<p>进程可以属于不同的独立的 forum，按 forum 为单位占有资源 in session。这是单独同步互斥、读写锁等经典问题的推广化。</p>
<ol>
<li>同步互斥：同一时间最多 1 个 forum 在 in session</li>
<li>无死锁：任何时间最少一个进程可以有效行动</li>
<li>有界等待：有成员的 forum 在有界时间内能 in session</li>
<li>同步进入：只要 forum 在 in session，其他有意愿的进程都能加入</li>
</ol>
<h4 id="中心化方案">中心化方案</h4>
<ul>
<li>每个进程拥有一个 $flag\in\{F_i,\perp\}$，中心协调器按顺序读取 flag 信息，安排进入 forum 和 in session</li>
<li>为了防止一个 forum 一直有进入，指定一个 leader（一般是第一个进入的进程），当 leader 退出时 forum 结束 in session</li>
</ul>
<h4 id="去中心化方案">去中心化方案</h4>
<p>每个进程拥有一个 $flag=(state,op),state\in \{request, in\_cs, in\_forum, passive\},op\in\{F,F&rsquo;,\perp\}$。类似于 <a href="#peterson-%E6%96%B9%E6%A1%88">peterson 的 2 进程方案</a>。为了保证想要进入 forum 的都可以，而不是偶尔检查条件被 skip，可以选择第一个进入的为 leader，leader 保证申请的随后进入 forum</p>
<pre tabindex="0"><code>First attempt with two forums F and F′
define  flag: array[1..n − 1] of (state, op), turn ∈ {F, F′}
        state ∈ {request, in_cs, in_forum, passive}
        op ∈ {F, F′, ⊥}
{Program for process i trying to attend forum F}
do ∃j ≠ i: flag[j] = (in_cs, F′) →

    flag[i] := (request, F); //发送请求

    do turn ≠ F ∧ ¬(∀j ≠ i: flag[j].op ≠ F′) → skip od; // (1 F&#39;之前执行完)∧(2 没有要求进入F&#39;的)

    flag[i] := (in_cs, F);//准备进入 forum 的临界区
od;

attend forum F;

turn := F′;
flag[i] := (passive, ⊥)
</code></pre><h2 id="ch-8-distributed-snapshot">ch 8 Distributed Snapshot</h2>
<p>记录分布式系统的单个分布组分的状态信息，收集分散的状态信息在下一章 <a href="#ch-9-global-state-collection">global state collection</a> 介绍。非常有用：死锁检测、程序终止检测、系统回滚等。</p>
<blockquote>
<p>cut 切分</p>
<p>一组事件，而且每个进程至少有一个事件</p>
</blockquote>
<blockquote>
<p>consistent cut</p>
<p>cut，而且对于里面的事件，其因的事件也在 cut 当中： $(a\in C)\wedge(b\prec a)\implies b\in C$</p>
</blockquote>
<blockquote>
<p>consistent</p>
<p>对于一次运行（computation，run，behavior），$\forall a,b, a\prec b$，a 发生在 b 前，就称为 consistent 的，保证 consistent 下可以有多种可能的实际事件顺序，如，交换并行的两个事件执行顺序不会影响运行的 consistent 特性</p>
</blockquote>
<h3 id="chandy-lamport-算法">Chandy-Lamport 算法</h3>
<p>强连通图，信道 FIFO，有一个启动进程 initiator，发生一个 * 标志消息启动记录，每个进程有两种状态，<code>white</code>和<code>red</code>，初始为<code>white</code></p>
<ol>
<li>启动进程原子执行
<ol>
<li>变<code>red</code></li>
<li>记录本地状态</li>
<li>向所有对外信道广播*标志</li>
</ol>
</li>
<li>所有进程在<strong>第一次</strong>接受到*标志后，先做以下原子操作再执行其他任务
<ol>
<li>变<code>red</code></li>
<li>记录本地状态：发送事件和接收事件分别由发送进程和接收进程记录</li>
<li>向所有对外信道广播*标志</li>
</ol>
</li>
</ol>
<p>算法记录最后一次白色+第一次红色事件。由于<strong>白色事件不可能引发红色消息</strong>，实际记录下来的事件顺序必然保持因果关系。</p>
<ul>
<li>算法记录下来的 snapshot state 都是由初始状态可达的，但不保证每次运行都能跑出这个状态</li>
<li>每个对于初始状态可达的最终状态，对算法记录下的 snapshot state 也是可达的：这保证了回滚的正确性</li>
</ul>
<h3 id="lai-yang-算法">Lai-Yang 算法</h3>
<p>对 Chandy-Lamport 的改进，信道不需要 FIFO，消息也附加两种状态，<code>white</code>和<code>red</code>。是一种懒记录方法，主要期待借用已有的各种消息传递。对于程序终止检测（终止后不会再收发任务消息）等需要额外发控制消息。</p>
<ol>
<li>启动进程记录本地状态，任何外发消息为$(msg,red)$</li>
<li>任何进程第一次接受到$(msg,red)$时，先记录本地状态，再处理接收信息</li>
</ol>
<h3 id="分布式-debug">分布式 debug</h3>
<blockquote>
<p>本地状态 $s(i),s(j)$ 对应 consistent 的全局状态</p>
<p>如果本地状态 $s(i),s(j)$ 是由事件 $e_i,e_j$ 引发，那么逻辑时钟关系 $\forall k,VC_k(e_i)\sim VC_k(e_j)$</p>
</blockquote>
<p>对由初始状态可达的 consistent 的全局状态应用判断 $\phi$。这样的判断时间复杂度巨大，需要注意可拓展性：n 个进程每个 m 个可能行动 $O(m^n)$</p>
<ul>
<li>Possibly $\phi$：至少一个为真</li>
<li>Definetly $\phi$：永真 $definetly;\phi \implies possibly; \phi$</li>
<li>Never $\phi$：永假</li>
</ul>
<h2 id="ch-9-global-state-collection">ch 9 Global State Collection</h2>
<p>本章假定底层任务能表现出预期的性质（如检测终止算法中，底层任务确实能终止）</p>
<h3 id="全局广播">全局广播</h3>
<p>假设本地需要被收集的为 $s(i)$,最后每个进程都能收集到 $\forall i:V(i)={s(k):0\le k\le n-1}$。那 naive 的方法就是每次向邻居通知自己新知道的其他进程的信息，直到大家知道全了。消息复杂度：向每个邻居发，每次多一个：$O(n^2)$，全局 $O(n^3)$</p>
<pre tabindex="0"><code>program broadcast (for process i}
define Vi, Wi: set of values;
initially Vi = {s(i)}, Wi = Ø {and every channel is empty}
do Vi ≠ Wi      →   send Vi\Wi to every outgoing channel;
                    Wi:= Vi
[] ¬empty (k,i) →   receive X from channel (k,i);
                    Vi:= Vi ∪ X
od
</code></pre><ul>
<li>$empty(i,j)\implies W_i\subseteq V_j$：归纳法易证，注意到 $W_i^{r+1}=V_i^{r+1},V^{r+1}/W^r_i\subseteq V_j$</li>
<li>停止时候能保证 $\forall i:V(i)={s(k):0\le k\le n-1}$: 由上一条+停止条件 有 $\forall i,j:V_i\subseteq V_j$，显然</li>
<li>有界步终止：必然递增</li>
</ul>
<h3 id="程序终止检测">程序终止检测</h3>
<p>（不一定需要是全局终止，相同步时候也要检测某相结束以开启下一相）</p>
<h4 id="dijstra-scholten-算法">Dijstra-Scholten 算法</h4>
<blockquote>
<p>diffusing computation</p>
<p>由一个 initiator 开启，通知邻居逐步开始的计算</p>
</blockquote>
<ul>
<li>沿方向的消息为 <code>signal</code> ，反向消息为<code>ack</code></li>
<li>环境 environment 节点：只有向外边</li>
<li>内部 internal 节点：从环境节点可达</li>
<li>环境节点起始发<code>signal</code> 开始算法</li>
<li>任何节点第一次收到<code>signal</code> 的发送方为父节点，然后自己开始向邻居广播<code>signal</code></li>
<li>之后收到<code>signal</code> 立刻回复<code>ack</code>，自己邻居都回复了<code>ack</code>后向父节点回复<code>ack</code>，起始节点收完<code>ack</code>即算法结束</li>
<li>对于某条有向边，沿向<code>signal</code>和反向<code>ack</code>数值差为 deficit</li>
<li>对于某个节点：
<ul>
<li>$C$：入边的 deficit 和</li>
<li>$D$：出边的 deficit 和</li>
</ul>
</li>
</ul>
<p>在这样设定下，有如下 2 不变式：</p>
<ol>
<li>$(C\ge 0)\wedge(D\ge 0)$:deficit 定义可知</li>
<li>$(C&gt;0)\vee(D=0)$:（1 等待邻居子图完成）或者是（2 邻居都完成了，可以回复父节点了）</li>
</ol>
<p>注意上述不变式有 $(C&gt;1)\vee(C=1\wedge D=0)$，整个进程之间关系是一棵树。要求信道 FIFO（保证工作信息和检测信息之间正确顺序，防止虚假终止）。在大家确实停止后，消息复杂度 $O(|E|)$（每个信道来去各一次）</p>
<pre tabindex="0"><code>program detect {for an internal node i}
define  C, D : integer
        m: (signal, ack) {represents the type of message received}
        state: (active, passive)
initially C = 0, D = 0, parent(i) = i
do (m = signal) ∧ (C = 0)   → C := 1; state := active;
                                parent := sender
                                //开始准备向邻居广播
    [] m = ack                  → D := D − 1
    [] (C = 1 ∧ D = 0) ∧ (state = passive) → send ack to parent;
                                            C:= 0; parent(i) = i
                                 //节点可以返回初始状态了
    [](m = signal) ∧ (C = 1)    → send ack to the sender
                                // 对多余的signal直接回复ack
od
</code></pre><h4 id="单向环的-token-passing">单向环的 token passing</h4>
<ol>
<li>每个节点 <code>black,white</code>两个状态，初始<code>white</code></li>
<li>向 token 传递反向高的节点发消息后，变<code>black</code></li>
<li><code>white</code>节点传递 token 时颜色不变，<code>black</code>节点传递时染黑 token</li>
<li>节点传递完 token 后变回<code>white</code></li>
<li>initiator 能收发白色 token 即终止</li>
</ol>
<p>算法要求消息通信瞬时（新的消息要追上 token 速度）</p>
<pre tabindex="0"><code>program term {for process i &gt; 0，假定进程0为启动进程}
define  color, token: (black, white) {colors of process and token}
        state : (active, passive)
do  (token = white) ∧ (state ≠ passive)   → skip
    [](token = white) ∧ (state = passive) →
            if color(i) = black → color(i) := white; send a black token
            [] color(i) = white → send a white token
            fi
    [](token = black)   → send a black token
    []i sends a message to a higher numbered process → color(i) :=black
od
{for process 0}
send a white token;
do
(token ≠ white) → send a white token
od
//收回白token 结束
</code></pre><h4 id="信用点分配算法-credit-recovery-algorithm">信用点分配算法 credit-recovery algorithm</h4>
<ul>
<li>$\sum credit(i)=1$</li>
<li>对于活跃进程：$credit(i)&gt;0$</li>
<li>对于休眠进程：$credit(i)=0$</li>
</ul>
<ol>
<li>活跃进程发消息时，将自身$credit/2$ 随消息发出</li>
<li>休眠进程接到消息，转活跃，并对于自身$+=msg_{credit}$</li>
<li>活跃进程收到消息，可以：发回给启动进程，或者为了减少消息数目 保留加到自己的 $credit$</li>
</ol>
<h3 id="浪潮-wave-算法">浪潮 wave 算法</h3>
<blockquote>
<p>wave</p>
<p>一个启动进程某活动，引发邻居活动，进而邻居的邻居活动，此谓浪潮</p>
<ol>
<li>每个计算有界</li>
<li>每个计算至少包括一个确定性事件 decision event</li>
<li>一个确定性事件 decision event 在每个进程中一些事件的因果前</li>
</ol>
</blockquote>
<blockquote>
<p>PIF</p>
<p>Propagation of Information with Feedback，类似于 <a href="#dijstra-scholten-%E7%AE%97%E6%B3%95">Dijstra Scholten 算法</a>里的广播，但是此时返回是副本不是<code>ack</code></p>
</blockquote>
<pre tabindex="0"><code>program PIF {for the initiator node i}
define  count : integer
        N(i): set of neighbors of process i

send M to each neighbor; count := |N(i)|
do
    count ≠ 0 ∧ M received → count: = count − 1
od
{program for a non-initiator node j≠i}
if
    message M received → parent := sender
                        send M to each neighbor except parent;
                        count := |N(j)|;
    []count &gt; 0 ∧ M received → count: = count − 1
    []count = 0              → send M to parent
fi
</code></pre><h2 id="ch-11-coordination-algorithms">ch 11 Coordination Algorithms</h2>
<h2 id="ch-12-fault-tolerant-systems">ch 12 Fault-Tolerant Systems</h2>
<h2 id="ch-13-distributed-consensus">ch 13 Distributed Consensus</h2>
]]></content:encoded></item><item><title>遥远的时间有关的童话/寓言（？</title><link>https://livypad.github.io/post/2022-06-21-fairytalerabbit/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-06-21-fairytalerabbit/</guid><description>遥远的时间有关的童话/寓言（？ 小时候看儿童向杂志看到一个略显黑暗（？）的童话/寓言（？。有个小兔子不喜欢上学，喜欢星期天放假。一个老兔子给了</description><content:encoded><![CDATA[<h1 id="遥远的时间有关的童话寓言">遥远的时间有关的童话/寓言（？</h1>
<p>小时候看儿童向杂志看到一个略显黑暗（？）的童话/寓言（？。有个小兔子不喜欢上学，喜欢星期天放假。一个老兔子给了 ta 一筐胡萝卜，吃一根就能到星期天了。小兔子就天天吃那筐胡萝卜，天天过星期天。有一天胡萝卜吃完了，小兔子也老了。因为胡罗卜的机制是跳过星期一到六。</p>
<p>记忆会自动分类记录不同的状态，日子过得就像那个小兔子。学习时会自动续接之前看到到的页码，做的题，而不会考虑之前的视频到哪一 p，知乎看到哪个问题。用记忆回顾关键点，真的会忽视中间其他领域用时。大学这种，以假期定界的生活。每年大休息状态：寒假和暑假；大工作状态：两个学期。4 年就只是 8 个学期。8 个萝卜就过去 4 年了。</p>
]]></content:encoded></item><item><title>FFmpeg转换音乐文件格式</title><link>https://livypad.github.io/post/2022-03-23-ffmpeg/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-03-23-ffmpeg/</guid><description>FFmpeg是一个开源强大的音视频库。这里用 FFmpeg“大炮打蚊子”，用来当格式工厂用，转音乐文件格式。下面是*Unix 环境下用find命</description><content:encoded><![CDATA[<p><a href="https://ffmpeg.org/">FFmpeg</a>是一个开源强大的音视频库。这里用 FFmpeg“大炮打蚊子”，用来当格式工厂用，转音乐文件格式。下面是*Unix 环境下用<code>find</code>命令搭配 FFmpeg，将当前工作路径下的所用*.flac 转化为*.mp3 格式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">find . -name <span class="s2">&#34;*.flac&#34;</span> -maxdepth <span class="m">1</span> -exec ffmpeg -i <span class="o">{}</span> -ab 320k -map_metadata <span class="m">0</span> -id3v2_version <span class="m">3</span> <span class="o">{}</span>.mp3 <span class="se">\;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="rust-的-cli-toy-程序">Rust 的 cli toy 程序</h1>
<p>由此，可以顺手搞一个 rust 的 cli 程序，实现任何音乐格式的互转。主要是使用<code>walkdir</code>这个库，不用自己实现遍历。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">package</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;music_converter&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;0.1.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">edition</span> <span class="p">=</span> <span class="s2">&#34;2018&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">walkdir</span> <span class="p">=</span> <span class="s2">&#34;2&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">borrow</span>::<span class="n">Borrow</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">env</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">path</span>::<span class="n">Path</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">process</span>::<span class="p">{</span><span class="n">Command</span><span class="p">,</span><span class="w"> </span><span class="n">Stdio</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">walkdir</span>::<span class="n">WalkDir</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">cin</span><span class="p">(</span><span class="n">print_info</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">String</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">print_info</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">input</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">String</span>::<span class="n">new</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">io</span>::<span class="n">stdin</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">read_line</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">input</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Failed to read line&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">input</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">path_match</span><span class="o">&lt;&#39;</span><span class="na">a</span><span class="o">&gt;</span><span class="p">(</span><span class="n">path</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="nc">Path</span><span class="p">,</span><span class="w"> </span><span class="n">ext</span>: <span class="kp">&amp;</span><span class="o">&#39;</span><span class="na">a</span> <span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">not_full_name</span>: <span class="kt">bool</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Option</span><span class="o">&lt;</span><span class="p">(</span><span class="o">&amp;&#39;</span><span class="na">a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">not_full_name</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">file_ext</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="p">.</span><span class="n">extension</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">file_ext</span><span class="p">.</span><span class="n">to_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ext</span><span class="p">.</span><span class="n">trim</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="n">path_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="p">.</span><span class="n">to_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">file_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">file_stem</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">to_str</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">file_name</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="s">&#34;.mp3&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">path_name</span><span class="p">.</span><span class="n">borrow</span><span class="p">(),</span><span class="w"> </span><span class="n">file_name</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="nb">None</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">None</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">ext</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">path</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">file_name</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">to_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">path_name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="p">.</span><span class="n">to_str</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">file_name_no_ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">clone</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">file_stem</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">to_str</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">unwrap</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">file_name_no_ext</span><span class="p">.</span><span class="n">push_str</span><span class="p">(</span><span class="s">&#34;.mp3&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">path_name</span><span class="p">.</span><span class="n">borrow</span><span class="p">(),</span><span class="w"> </span><span class="n">file_name_no_ext</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="nb">None</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">call_ffmpeg</span><span class="p">(</span><span class="n">src_name</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span>: <span class="kp">&amp;</span><span class="kt">str</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">child</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Command</span>::<span class="n">new</span><span class="p">(</span><span class="s">&#34;ffmpeg&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">args</span><span class="p">([</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;-i&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">src_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;-ab&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;320k&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;-map_metadata&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;0&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;-id3v2_version&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;3&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">tgt_name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">])</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">stdout</span><span class="p">(</span><span class="n">Stdio</span>::<span class="n">null</span><span class="p">())</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">spawn</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Failed to execute command&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">ecode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">child</span><span class="p">.</span><span class="n">wait</span><span class="p">().</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;failed to wait on child&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">ecode</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">current_dir</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">env</span>::<span class="n">current_dir</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">current_dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">current_dir</span><span class="p">.</span><span class="n">as_path</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;音乐转换器，请保证音乐文件在该脚本所在目录&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cin</span><span class="p">(</span><span class="s">&#34;输入模式，q退出，ls列出当前目录下某一拓展名的文件，r递归转换，nr非递归转换，o单文件转换&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">mode</span><span class="p">.</span><span class="n">to_lowercase</span><span class="p">().</span><span class="n">trim</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;ls&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cin</span><span class="p">(</span><span class="s">&#34;输入要查看的拓展名&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">WalkDir</span>::<span class="n">new</span><span class="p">(</span><span class="n">current_dir</span><span class="p">).</span><span class="n">into_iter</span><span class="p">().</span><span class="n">for_each</span><span class="p">(</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="kd">let</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">_tgt_name</span><span class="p">))</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path_match</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">ext</span><span class="p">.</span><span class="n">trim</span><span class="p">(),</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;{}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">src_path</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;r&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cin</span><span class="p">(</span><span class="s">&#34;输入待转换的拓展名&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">WalkDir</span>::<span class="n">new</span><span class="p">(</span><span class="n">current_dir</span><span class="p">).</span><span class="n">into_iter</span><span class="p">().</span><span class="n">for_each</span><span class="p">(</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="kd">let</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">))</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">path_match</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">ext</span><span class="p">.</span><span class="n">trim</span><span class="p">(),</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="n">call_ffmpeg</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">.</span><span class="n">as_str</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;nr&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cin</span><span class="p">(</span><span class="s">&#34;输入待转换的拓展名&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">WalkDir</span>::<span class="n">new</span><span class="p">(</span><span class="n">current_dir</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">max_depth</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">for_each</span><span class="p">(</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="kd">let</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">))</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                    </span><span class="n">path_match</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">ext</span><span class="p">.</span><span class="n">trim</span><span class="p">(),</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                    </span><span class="n">call_ffmpeg</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">.</span><span class="n">as_str</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;o&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cin</span><span class="p">(</span><span class="s">&#34;输入待转换的文件名&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">WalkDir</span>::<span class="n">new</span><span class="p">(</span><span class="n">current_dir</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">max_depth</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">.</span><span class="n">for_each</span><span class="p">(</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="kd">let</span><span class="w"> </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">((</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">))</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                    </span><span class="n">path_match</span><span class="p">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">filename</span><span class="p">.</span><span class="n">trim</span><span class="p">(),</span><span class="w"> </span><span class="kc">false</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                    </span><span class="n">call_ffmpeg</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span><span class="w"> </span><span class="n">tgt_name</span><span class="p">.</span><span class="n">as_str</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;q&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;input not support&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">if</span><span class="w"> </span><span class="n">mode</span><span class="p">.</span><span class="n">trim</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&#34;123&#34;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;hi&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item><item><title>“如意”的两种实现</title><link>https://livypad.github.io/post/2022-03-15-asyouwish/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-03-15-asyouwish/</guid><description>“如意” 中文 “万事如意”其实可以有两种实现方式：可以是提出心意之后即时实现；也可以是提前预知会被提出的心意并提前准备好。后一种方式时间更加宽</description><content:encoded><![CDATA[<h1 id="如意">“如意”</h1>
<h2 id="中文">中文</h2>
<p>“万事如意”其实可以有两种实现方式：可以是提出心意之后即时实现；也可以是提前预知会被提出的心意并提前准备好。后一种方式时间更加宽松，对“灯神”能力需求可以降低。只要分支预测准确率足够高，提前准备带来的优势应该是可以超过偶发的预测失败以及维护一个预测器的额外代价（重新即时准备，旧的准备浪费）。所以说，“万事如意”的“灯神“不一定是神通广大，可能只是你太容易被 ta 理解。</p>
<h2 id="english">English</h2>
<p>In fact, &ldquo;as you wish“ can be accomplished in two different strategies, a genie can either fulfill ones&rsquo; dream or wish after its proposal, or it can predict that particular wish and prepare for it in advance. The latter strategy has a much looser time constraint on genie, therefore requiring less magic power. As long as branch predictor&rsquo;s accuracy is high enough, the advantage of prediction might outweigh the extra cost of maintaining the predictor and penalty of misprediction (former preparation becomes useless and the wish need to be fulfilled instantly). To draw a conclusion, a genie who promise to follow any order may not be extremely resourceful, instead, maybe you are too easy to understand and to be predicted.</p>
]]></content:encoded></item><item><title>IO效率与人</title><link>https://livypad.github.io/post/2022-02-20-ioeff/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-02-20-ioeff/</guid><description>IO 效率与人 状态信息 Scales D J, Nelson M, Venkitachalam G. The design of a practical system for fault-tolerant virtual machines [J]. ACM SIGOPS Operating Systems Review, 2010, 44(4): 30–39. VMware 公司有一篇 VM-FT的论文，介绍了如何借助虚拟机技术，构建</description><content:encoded><![CDATA[<h1 id="io-效率与人">IO 效率与人</h1>
<h2 id="状态信息">状态信息</h2>
<blockquote>
<p>Scales D J, Nelson M, Venkitachalam G. The design of a practical system for fault-tolerant virtual machines [J]. ACM SIGOPS Operating Systems Review, 2010, 44(4): 30–39.</p>
</blockquote>
<p>VMware 公司有一篇 <strong>VM-FT</strong>的论文，介绍了如何借助虚拟机技术，构建一个主/从备份的容错系统。大部分计算机的指令是确定性的（deterministic），给定当前状态和指令，执行之后的状态是确定的。外界对内部的输入、产生随机数等少部分情况下，计算机执行是非确定性的（non-deterministic）。<strong>VM-FT</strong>论文的核心思想是通过虚拟机拦截下主机所有 non-deterministic 的指令，产生一个 log，通过网络发给从机，这样可以在完全不了解上层应用情况下，实现双机器运行任何软件的同步备份。这样依赖状态机的假设的方法存在一个问题，无法应对多核情况。多核执行时候的细微先后顺序是不能确定的，从而从相同状态和指令序列出发不能保证最后相同状态结果。</p>
<p>为了清晰传递自己的一个想法，自然希望能直接传递自己思想活动状态；别人直接“共情”我的思想活动，这是最容易理解的方式（？）；通过传递大量思考当中的细节（类比于指令），别人直接复现这些细节，相当于传递思想活动状态。但问题是人的大脑的神经元连接天然并行，比多核的执行顺序和并行度高的多的多；思考当中的各种补充细节，也相应的比指令序列多的多；表述这些细节，还需要自己加工成语言文字（即使这种直接表达思考细节，而不是构建成文章已经省略了很多文章结构的思考，语言文字的输出带宽还是比不上思想产生的速度）。VMware 最后似乎对于多核，还是放弃了状态机方法，回到传统的传 checkpoint 整体传状态。</p>
<blockquote>
<p>或许需要一个卡拉（？</p>
</blockquote>
<h2 id="传统书信的低带宽">传统书信的低带宽（？</h2>
<blockquote>
<p>为什么要在聊天时候发网页链接、屏幕截图？</p>
</blockquote>
<ul>
<li>为了可信，有出处可以溯源</li>
<li>为了避免讨论时候自己概括让对方先入为主</li>
<li>为了提供自己这边的输出带宽（？</li>
</ul>
<p>如果是我自己概括网页、截图内容，信息流动是<strong>网页/截图-&gt;信息理解-&gt;概括成语言文字-&gt;打字-&gt;对方理解语言文字</strong>；发链接和截图的话，信息流动是<strong>网页/截图-&gt;信息理解-&gt;发送链接/截图-&gt;对方理解网页/截图</strong>。阅读理解图文内容，并形成一个初步的感受印象和思考的速度很快，而且如前所说，思维里面可以顺序稍微模糊；但是如果需要再次概括输出，语言文字是线性的，需要考虑组织文字逻辑的问题。如果直接发链接/截图，可以跳过语言组织环节。</p>
<p>因此我莫名的害怕传统书信（？。现代的即时通讯工具即使加上能发链接/截图的优化，如前所述有时候还是不能匹配思维产生速度。如果媒介换成书信，只能使用语言文字，极高的延迟（？），那必然至少需要改变现在的交流模式。如果再碰上达西那种一封信不愿意多几张信纸写多几件事的家伙，那这个信息量就可想而知了。</p>
]]></content:encoded></item><item><title>王子游戏以及该游戏的不平衡性</title><link>https://livypad.github.io/post/2022-01-20-prince/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-01-20-prince/</guid><description>王子游戏以及该游戏的不平衡性 规则 共有王子，公主和侍女（只能说真话的一边），皇后、女伯爵和侍卫（只能说假话的一边），男爵和牧师（可以任意选择说</description><content:encoded><![CDATA[<h1 id="王子游戏以及该游戏的不平衡性">王子游戏以及该游戏的不平衡性</h1>
<h2 id="规则">规则</h2>
<ul>
<li>共有王子，公主和侍女（只能说真话的一边），皇后、女伯爵和侍卫（只能说假话的一边），男爵和牧师（可以任意选择说真假话）</li>
<li>大家除了王子互相知晓彼此身份，王子对其他人身份都不知道</li>
<li>王子需要向其他人每人问一个问题，再问完全员之后，可以选择任意一人再问一个问题。问题必须从下列 3 个中选择，回答必须按照上述身份的规则给出：
<ol>
<li>你的身份是什么</li>
<li>指定的某人身份是什么</li>
<li>公主是谁</li>
</ol>
</li>
<li>问完所有问题，王子需要指定谁是公主，按下列情况结束游戏并判断胜负
<ol>
<li>王子指定的人是公主：王子、公主和侍女获胜</li>
<li>王子指定的人是皇后：皇后、女伯爵和侍卫获胜</li>
<li>王子指定的人既不是公主也不是皇后，而是其他任何身份：牧师和男爵获胜</li>
</ol>
</li>
</ul>
<h2 id="理想条件">理想条件</h2>
<p>在好人优势更大的情况下：</p>
<ul>
<li>可以无限次问问题</li>
<li>一个已知明牌的假话哥</li>
</ul>
<p>注意其中的可以无限次问问题的条件。该条件下，每个人对局面看法都是已知的，而且真话哥没有别的选择，<em><strong>唯一的变化来自于假话哥和胡话哥的配合</strong></em>。如果假话哥和胡话哥之间配合，能保证了两边局面完全对称，两边胜率完全平分，可以认为这样的策略是两边都能接受的策略。</p>
<h2 id="均衡的策略">均衡的策略</h2>
<p>3 组人分为 真话组、假话组、胡话组，组内部自称好侍女和公主。</p>
<p>明牌专说假话的人</p>
<ul>
<li>称自己是胡话哥（确实为假）</li>
<li>说别人三个组都是逆顺序的侍女和公主（逆了顺序，一定为假话）</li>
<li>公主在任意一组自称侍女的位置（逆了顺序，一定为假话）</li>
</ul>
<p>这样明牌说假话的人事实上王子从 ta 口中不能得到任何有用信息。</p>
<p>可能有以下两种可能性(<em>胡话组</em>用斜体，<strong>假话组</strong>是粗体)。第一种情况，<em>胡话组</em>和真话组对明牌假话人身份认同一致；第二种情况，<em>胡话组</em>和<strong>假话组</strong>对明牌假话人身份认同一致。两种情况对于王子绝对对称</p>
<ul>
<li>两个互称胡话的组，对明牌假话人意见一致</li>
<li>两个互称胡话的组，对剩下那个组都认为是假话组，且次序一致</li>
<li>必有一个组被其他两组认为是胡话组，且次序相反：注意到第 2 种情况，假话组由于要说假话，对胡话组判断和真话组对胡话组判断次序相反；所以第 1 种情况，胡话组和假话组对真话组下判断时，注意次序相反就行</li>
</ul>
<p>因此只有靠运气选组，也就是最后运气成分选到公主。</p>
<p><img loading="lazy" src="/assets/img/2022-01-20-1.png" alt="情形1"  />
</p>
<p><img loading="lazy" src="/assets/img/2022-01-20-2.png" alt="情形2"  />
</p>
<h2 id="运气成分">运气成分</h2>
<blockquote>
<p>概率计算不保证正确</p>
</blockquote>
<p>已知上述 2 种情况，真话组</p>
<ul>
<li>要么被 2 组同时认为是胡话且次序相反（此时被 2 组同时认为是假话的组是假话组）</li>
<li>要么被 2 组同时认为是假话（此时被 2 组同时认为是胡话的组是胡话组）</li>
</ul>
<p>所以王子理论胜率也只有抛硬币的 $50\%$ ，其他两组分享 $25\%$ 。在不理想条件下，王子理论胜率应该更低。</p>
]]></content:encoded></item><item><title>历史</title><link>https://livypad.github.io/post/2022-01-16-history/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-01-16-history/</guid><description>学习历史 那些摆出一个多年前的某文章等材料，以当时多先进来批判当下多落后的，事实上绝大多数人也不会在提自己的观点时候搞详细的文献/历史综述（包</description><content:encoded><![CDATA[<h1 id="学习历史">学习历史</h1>
<p>那些摆出一个多年前的某文章等材料，以当时多先进来批判当下多落后的，事实上绝大多数人也不会在提自己的观点时候搞详细的文献/历史综述（包括现在的我）。这或许是某种程度上的双标。</p>
<p>对于大众而言，实在不可能指望有多少材料是真的能在当时普及的。即使别人看了材料能认同当中的观点，可是当年这材料很可能根本就没传播到 ta，然后现在拿出材料希望别人持有那样的观点。一边期待一个“冷门”材料被别人掌握，一边自己也不搞综述这种去广泛关注历史和掌握各种材料。这就是双标吧。</p>
<p>如果你只是偶然的从历史中学到一课，那么你没有资格指责别人偶然的没有学到过这一课；如果你系统的学习历史中得到这一课，那么请你拿出自己系统学习历史的证据，比如你搞过综述。所以事实上很多人（包括我）也没系统的学习历史（？），所以这可能就是为什么人类从历史中学到的最大的教训就是人类从不从历史中吸取教训（？</p>
]]></content:encoded></item><item><title>《长相思·山一程》 分析</title><link>https://livypad.github.io/post/2022-01-09-nostalgia/</link><pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2022-01-09-nostalgia/</guid><description>《长相思·山一程》 分析 高中时候芳芳在赏析纳兰性德的《长相思·山一程》时，为了表现原词炼字功力，给出对比版本“风萧瑟，雪纷纷”。当时大家意见里</description><content:encoded><![CDATA[<h1 id="长相思山一程-分析">《长相思·山一程》 分析</h1>
<p>高中时候芳芳在赏析纳兰性德的《长相思·山一程》时，为了表现原词炼字功力，给出对比版本“风萧瑟，雪纷纷”。当时大家意见里（？，至少在我的印象中）反而认为修改版不是不能接受。而从现在的我看来，也认为反而修改版也很好，甚至可能好于原词。下面先给出原词：</p>
<blockquote>
<p>山一程，水一程，身向榆关那畔行，夜深千帐灯。</p>
<p>风一更，雪一更，聒碎乡心梦不成，故园无此声。</p>
</blockquote>
<p>我的观念中，对比原词和修改版，原词更加偏重于强调时长，修改版更加偏重于强调强度。而在整个下片考虑，强调强度应该优于强调时长。<br>
第一，从对人的情感激发能力来看，强度先于时长。极端情况下，只有时长没有强度，风雪只能“润物细无声”的话，词人只要不往外看风雪对 ta 都没什么影响，也谈不上接下来的感情波动；只有强度没有时长，雷声持续时间很短暂，但是只要几声雷声就能吓到胆小的小孩一时半会无法睡觉。下一句的“聒”字明显只能搭配上强度因素，而且由上所述，词人的“梦不成”更可能是被强度影响的结果。最后一句的“无此声”也可以解释为风雪声的强度的罕见。当然，也可以辩解时长很长的风雪在故园很罕见，这个问题在下一点中讨论。</p>
<p>第二，时长对人的影响，边际效果递减非常严重。具体到“梦不成”，也就是失眠的情景，长时间无法入睡，到底是 2 个小时（1 更的时间）还是 4 个小时（2 更的时间），区别并不是那么巨大。人在床上翻来覆去，想事情的情状并不因为时间多少几十分钟会有很大变化。所以在我看来，特意强调“一更”有点描写过度。真正有价值的信息只是知道时间很长，大家并不需要关心时间具体长度。</p>
<p>当然，还可以辩解说都数了“一更，一更”就暗示了强度大无法睡觉。但我认为，前面两点已经表现了，时长不如强度重要，所以牺牲时长，进一步特化描绘强度，更容易对应下文，反而可能艺术效果更好。</p>
<p>（失眠时长不那么重要，当然是因为这篇初稿就是我自己失眠躺床上偶然想到的，亲测不是很重要）</p>
]]></content:encoded></item><item><title>用生物拟人化</title><link>https://livypad.github.io/post/2021-10-30-creatureemotion/</link><pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2021-10-30-creatureemotion/</guid><description>生物拟人 用某种非人生物概括人性格的理论（注意是概括不是描写，因为描写可以多 tag（？），这些理论一般都是映射关系），非常普遍，但这就很奇怪。</description><content:encoded><![CDATA[<h1 id="生物拟人">生物拟人</h1>
<p>用某种非人生物概括人性格的理论（注意是概括不是描写，因为描写可以多 tag（？），这些理论一般都是映射关系），非常普遍，但这就很奇怪。（这里指代的不仅是动物，furry 控什么的，也包含植物，比如比如花语，还有 hp 里面魔杖木材和巫师性格关系什么的）因为一般大家都认同人的性格复杂很多侧面。这样简单的概括即使能绝对覆盖很大，相对比例也是很可疑的。虽然这么干很简洁就是了。更何况，借用的非人生物特点，很少会考虑或者暗中体现演化亲缘关系。但显然演化近的一般共享特点也应该多一些（？。</p>
<p>即使认为这么干可以加速对陌生人性格的理解。但问题是，对于点头之交，花时间了解性格意义也不大（？；而大部分深入理解对面性格的场景，本来就是期待和对方长期相处下去，这时候还是准确性是更重要的。至于为啥要用人类本身解释世界，可能可以简单说是自大吧（？</p>
]]></content:encoded></item><item><title>[杂谈/胡说] 浅析七海灯子对喜欢的观念</title><link>https://livypad.github.io/post/2020-08-08-touko/</link><pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-08-08-touko/</guid><description>[杂谈/胡说] 浅析七海灯子对喜欢的观念 声明 这只是笔者的个人观点，游戏之作。本意是换个说法理解原著的一些情节。和原作者/原作品/其他同人无关。</description><content:encoded><![CDATA[<h1 id="杂谈胡说-浅析七海灯子对喜欢的观念">[杂谈/胡说] 浅析七海灯子对喜欢的观念</h1>
<h2 id="声明">声明</h2>
<p>这只是笔者的个人观点，游戏之作。本意是换个说法理解原著的一些情节。和原作者/原作品/其他同人无关。分析基于笔者的个人看法，如有谬误，敬请斧正。</p>
<p>本文中说的爱/爱情/喜欢 etc.这些词汇，没有特殊说明，狭义的指代人对人的感情。</p>
<h2 id="绝对的爱">绝对的爱（？</h2>
<p>在讨论作品之前，先考虑一个问题：</p>
<p>（在指定对象后，）是否有绝对的爱？</p>
<p>这个问题可能比较奇怪，比较难回答。回答可能也比较个人化，比较见仁见智。那么，不妨换一个更清晰的问题：</p>
<p>是否 <em><strong>应当</strong></em> 有绝对的爱？</p>
<p>这个问题简单多了。爱情确实重要，但人不止要考虑爱，还要考虑国家，社会，亲情友情（暂时将爱限定于爱情）。那么，最极端的情况下，如果爱人杀人放火吸毒出轨等等无恶不作，从基本的社会道德出发，都不应‘该继续爱 ta。或者换个不是那么极端的例子，职业道德要求，老师和学生是不应该谈恋爱的（这个主要是考虑老师拥有隐含的优势地位，而且潜在的对其他学生不公平）。那么，喜欢其实是有条件性的。</p>
<h2 id="灯子的观念">灯子的观念</h2>
<p>在原著中，开始时候的灯子的爱情观念，如下引文（出自漫画第 10 话，大意如此）。</p>
<blockquote>
<p>“喜欢这样的你”什么的，不就是“你若不再是这样，就不会再喜欢你了”这个意思吗？</p>
<p>“喜欢”是用来束缚的词语</p>
</blockquote>
<p>这样的理论其实是有一定合理性的。本质上，这个理论其实也和上面讨论一样，反对一般观念里面爱的绝对性和崇高性，指出爱的条件性。换个表述。一般的观念是</p>
<p>$$
p(喜欢|对方是对方)
$$</p>
<p>而现在我们已经意识到爱是有条件的。</p>
<p>$$
p(喜欢|对方是对方，对方的行为)
$$</p>
<h2 id="作品发展后的观念">作品发展后的观念</h2>
<p>在先前对原作者的采访中，仲谷老师被问及 ta 本人的对喜欢的观念，老师表示不能透露，因为不能剧透作品的结尾。可以注意到作品在后期，沙弥香对灯子说的一番话，促进了灯子的转变。我们不妨认为这段话反映了作品（以及老师自己）的观念出自漫画第 10 话，大意如此）。</p>
<blockquote>
<p>…并不是说你不像现在这样就不可以，也不说你变得怎样都无所谓。所以怎么说呢……</p>
<p>我相信你会一直是我喜欢的样子。我认为喜欢更多是一种信赖，吧。</p>
</blockquote>
<p>（似乎看上去正常了很多）</p>
<p>其实这里可以发现，比较正常的爱情观念，同样也是排斥绝对的爱，而承认了喜欢的条件性。而灯子前期观念实际扭曲的点在于，ta 把喜欢里面的条件看的过分苛刻了。只有少数的，极其集中的行为对应较高的喜欢。不恰当的说，犹如 Dirac $\delta$函数。</p>
<p><img loading="lazy" src="/assets/img/delta%20func.png" alt="delta函数"  />
</p>
<p>而一般意义下，喜欢的条件宽泛许多。在一定范围内都是“高原”：虽然可能因为某些具体行为会有上下波动（比如一些摩擦会影响双方关系一类的），但一般来说都能保持在一个比较高的范围里面。这样的喜欢才是世间常态。</p>
<h2 id="后话">后话</h2>
<p>这篇杂谈起源于，笔者有次偶然思考灯子的观念，ta 的观点乍一眼其实是有一定道理的。仔细思考后发现其实可以直接依靠条件强弱说明。笔者的思考和本文其实选择了概率论，贝叶斯公式的视角。从贝叶斯的角度，先验的喜欢，在对方行为变化后，结合自己的条件喜欢，得到后验的喜欢。至少对笔者，这套语言更加清晰，更简单。</p>
<p>这个模型还可以有个现实应用（？）。虽然前文中指出，大部分人的条件喜欢的分布不如前期灯子观念中那样极端，边缘问题仍然存在。所谓的忠诚度测试，经典的情景双难问题（比如落水），就是在测试边缘情况。所谓的分歧，其实就是问题选择挂在喜欢概率“陡坡”处。</p>
<p>如果继续推广，可能，人们的喜欢实际上可以改成</p>
<p>$$
p(喜欢|某人的特征和行为)
$$</p>
<p>这某种意义上会导出<a href="https://what-if.xkcd.com/9/">what if 第九期知心爱人</a>里面引用的歌词所表达的，理论上，（在可能的平行世界里面），爱上其他人，生活也还行。</p>
<blockquote>
<p>But of the 9.999 hundred thousand other loves,</p>
<p>Statistically, some of them would be equally nice.</p>
</blockquote>
<p>这确实是个悲伤的，却又看起来正确性挺高的推论。(-_-)（By the way，仲谷老师的《月哭》结尾大概也有类似的悲伤）</p>
]]></content:encoded></item><item><title>VS Code，All in One（3）——v0.1.2</title><link>https://livypad.github.io/post/2020-06-23-vsc3/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-06-23-vsc3/</guid><description>VS Code 以及其他的安利向（3）-LaTex LaTex 本身有一定的复杂性和学习门槛。在本文中，笔者尝试走一条特殊的思路写这个教程。这也是笔者自己学会 LaTex 的道</description><content:encoded><![CDATA[<h1 id="vs-code-以及其他的安利向3-latex">VS Code 以及其他的安利向（3）-LaTex</h1>
<p>LaTex 本身有一定的复杂性和学习门槛。在本文中，笔者尝试走一条特殊的思路写这个教程。这也是笔者自己学会 LaTex 的道路。但这条道路是不能覆盖 LaTex 的方方面面（笔者自己也没学会）。所以实在遇到问题，除了联系笔者增补教程，还可以求助搜索引擎。再次复习一下这个系列文章的宗旨：</p>
<p><strong>搜索引擎是最好的老师，不会的需求，直接去查询，学好</strong></p>
<p>本文的大概思路<strong>安装环境-&gt;学会数学语法-&gt;从模板学习 LaTex</strong></p>
<p>笔者会提供一个现成的可用的 Latex 源代码。在这个基础上就能编译出自己的文档了。需要的更多功能可以在之后通过搜索引擎学习。</p>
<h2 id="何为-latex">何为 LaTex</h2>
<p>相比如 markdown 这样的简单标记语言，latex 是一套更完整，复杂的标记语言+排版系统。优点有：</p>
<ol>
<li>LaTex 有极其发达的数学公式支持。支持自动编号，全文引用（可以有链接跳转）等等特性。LaTex 的数学公式语法被 markdown 和 word 自带的插入公式借用，所以说至少学习 LaTex 后，使用 word 的公式功能也更方便。</li>
<li>相比 word 所见即所得，虽然 word 也有样式等功能，LaTex 容易实现排版和内容分离。这一点还使得 LaTex 方便切换主题。内容不变可以输出排版不一样的文档。</li>
<li>bibTex 可以实现极其方便的引用文献处理。</li>
<li>LaTex 还有比如 tikz 宏包，可以直接实现简单的画图功能。</li>
</ol>
<h2 id="安装-latex-发行版">安装 LaTex 发行版</h2>
<p>发行版就是基于 LaTex 语言的编译器等等打包好的可以用的软件。根据很多大佬们的说法，CTex 套装已经非常老旧，其中配套的 WinEdt 其实是一个收费软件。我们这个教程不准备使用这个套装，而是选择 Tex Live。</p>
<p>Tex Live 可以在<a href="https://mirrors.tuna.tsinghua.edu.cn/#">Tuna（清华大学开源镜像站）</a>上下载镜像，这样速度比从国外下载会快很多。在右侧，“获取下载链接”-&gt;“应用软件”-&gt;“Tex 排版系统”-&gt;“Tex Live2020”。单击即可下载一个 iso 压缩包。</p>
<p><strong>警告，Tex Live 压缩包大概有 4GB，注意网速和流量</strong></p>
<p>解压该文件，以管理员身份（在右键文件后在菜单里选择），打开 install-tl-windows.bat 文件。这个是个自动安装脚本，如果没有特别的比如空间要求，建议可以直接“下一步”到底。全部安装，注意勾选添加到环境变量</p>
<p><strong>警告，Tex Live 安装好大概会有 8GB 大小，安装需要一定时间，请耐心等待</strong></p>
<p>Tex Live 会自带一个 Texworks Editor，也可以用来写 LaTex。但我们这个系列一切基于 VS Code。</p>
<h2 id="配置-vs-code">配置 VS Code</h2>
<p>在插件市场搜索下载插件 LaTex Workshop。这个插件基本就能帮助完成所有 LaTex 相关的任务。</p>
<p>进入设置界面。点击右上角“打开设置（JSON）”，粘贴以下设置。虽然这是个快速上手向教程，但还是建议仔细阅读这些设置的注释，尽量理解这些设置的含义。</p>
<p>写 LaTex 在 VS Code 中新建一个 <strong>英文标题（防止中文不支持）.tex</strong> 文件就能开始编写了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;latex-workshop.latex.autoBuild.run&#34;</span><span class="err">:</span> <span class="s2">&#34;never&#34;</span><span class="err">,</span>
</span></span><span class="line"><span class="cl"><span class="c1">//可选默认是onFileChange，改写了文件会自动编译，可以改成never，手动编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s2">&#34;latex-workshop.message.error.show&#34;</span><span class="err">:</span> <span class="kc">false</span><span class="err">,</span><span class="c1">//可选，不显示错误信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s2">&#34;latex-workshop.message.warning.show&#34;</span><span class="err">:</span> <span class="kc">false</span><span class="err">,</span><span class="c1">//可选，不显示警告信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s2">&#34;latex-workshop.latex.tools&#34;</span><span class="err">:</span> <span class="p">[</span><span class="c1">//必须有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-synctex=1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-interaction=nonstopmode&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-file-line-error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-pdf&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;%DOCFILE%&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-synctex=1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-interaction=nonstopmode&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;-file-line-error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;%DOCFILE%&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;bibtex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;bibtex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;%DOCFILE%&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;latex-workshop.latex.recipes&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//xelatex编译一遍，一般的Latex文档这样编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">//xelatex不支持中文标题！！！！
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nt">&#34;tools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;xe-&gt;bib-&gt;xe-&gt;xe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//需要bibTex的文档，用于有bib文件引用的LAtex文档
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nt">&#34;tools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;bibtex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;xe-&gt;xe-&gt;xe&#34;</span><span class="p">,</span><span class="c1">//Latex文档内部有交叉引用时候这样编译
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nt">&#34;tools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;xelatex&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//换一个编译器，一般来说xelatex对中文等支持更好，这个选项以备万一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">//pdflatex可以支持中文标题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nt">&#34;tools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;pdflatex&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;pdf-&gt;bib-&gt;pdf-&gt;pdf&#34;</span><span class="p">,</span><span class="c1">//同上
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nt">&#34;tools&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;bibtex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;pdflatex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;latex-workshop.latex.clean.fileTypes&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//tex文件编译会有一些辅助软件，可以靠这个设置清理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="s2">&#34;*.aux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.bbl&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.blg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.idx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.ind&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.lof&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.lot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.out&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.toc&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.acn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.acr&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.alg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.glg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.glo&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.gls&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.ist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.fls&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.log&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.fdb_latexmk&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;*.gz&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="latex-数学公式相关-a-语法">LaTex 数学公式相关 a 语法</h2>
<p>这个是 LaTex 最精华的一部分，建议至少学会这个部分。这一部分的知识也可以用于 markdown 文档编写。</p>
<p>首先，LaTex 语法一般来说，如果是英文字母描述的命令，使用\开头。\也可以用作一些特殊符号的转义，比如%是 LaTex 的注释符号，如果需要打出%本身，可以打%，作为一个整体表示百分号。</p>
<p>Latex 里面使用<code>\begin{}\end{}</code>来给出环境。</p>
<h3 id="基本符号">基本符号</h3>
<ol>
<li>指数^，下标_，如果不止一个字母/数字的上下标，用{}括起来</li>
<li>\frac{}{} 分数</li>
<li>\sqrt{} 平方根</li>
<li>\partial 偏导数</li>
<li>\ +希腊字母的名字输出希腊字母，例如\alpha 输出$\alpha$</li>
<li>\int 积分，\sum 求和，\lim 极限，\prod 连乘，^_用来表示上下限，和上下标含义一样。</li>
<li>\approx 约等于，\neq 不等号，\geq 大于等于，\leq 小于等于</li>
<li>\mathrm{}在数学公式里面输入正体，用于输入单位等。\mathbb{}花体字$\mathbb{N}$</li>
<li>\left( \right)左右大括号，这些符号必须成对使用。同理可以比如{[等，\right.表示空白。</li>
</ol>
<h3 id="数学公式环境">数学公式环境</h3>
<ol>
<li>单独的$括起来，是无编号行内公式。</li>
<li>连着两个$，之间括起来，编号好的行间公式</li>
<li><code>\begin{equation} \end{equation}</code> 之间括起来的是编号的行间公式</li>
</ol>
<h3 id="公式对齐">公式对齐</h3>
<p>上述的环境只能支持一行的公式。如果比如需要写出连等式子，可以在数学环境（上面的 2，3 条）里面使用<code>\begin{aligned} \end{aligned}</code>。在中间的数学公式就可以实现对齐。</p>
<p>&amp;是对齐符号，每行的&amp;会自动对齐，连等式子一般写成&amp;=。两个\是换行符，表示不同行公式之间的换行。</p>
<p>使用<code>\left{\right.</code>在数学环境和<code>\begin{aligned} \end{aligned}</code>，可以实现多条公式前面有个大括号括起来。</p>
<h3 id="数学公式范例">数学公式范例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl"><span class="c">%注意这里面用到了公式环境，对齐，上下标，分号，根号，大括号
</span></span></span><span class="line"><span class="cl"><span class="c"></span> <span class="k">\begin</span><span class="nb">{</span>equation<span class="nb">}</span><span class="c">%公式环境
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\left\{</span>
</span></span><span class="line"><span class="cl">    <span class="c">%大括号~
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\begin</span><span class="nb">{</span>aligned<span class="nb">}</span><span class="c">%对齐
</span></span></span><span class="line"><span class="cl"><span class="c"></span>         <span class="nb">&amp;</span> <span class="k">\mu</span><span class="nb">_</span>L=<span class="k">\frac</span><span class="nb">{</span>e<span class="nb">}{</span>2m<span class="nb">}</span>P<span class="nb">_</span>L=<span class="k">\frac</span><span class="nb">{</span>e<span class="nb">}{</span>2m<span class="nb">}</span><span class="k">\sqrt</span><span class="nb">{</span>L(L+1)<span class="nb">}</span><span class="k">\frac</span><span class="nb">{</span>h<span class="nb">}{</span>2<span class="k">\pi</span><span class="nb">}</span> <span class="k">\\</span>
</span></span><span class="line"><span class="cl">         <span class="nb">&amp;</span> <span class="k">\mu</span><span class="nb">_</span>s=<span class="k">\frac</span><span class="nb">{</span>e<span class="nb">}{</span>m<span class="nb">}</span>P<span class="nb">_</span>s=<span class="k">\frac</span><span class="nb">{</span>e<span class="nb">}{</span>m<span class="nb">}</span><span class="k">\sqrt</span><span class="nb">{</span>S(S+1)<span class="nb">}</span><span class="k">\frac</span><span class="nb">{</span>h<span class="nb">}{</span>2<span class="k">\pi</span><span class="nb">}</span>   <span class="k">\\</span>
</span></span><span class="line"><span class="cl">    <span class="k">\end</span><span class="nb">{</span>aligned<span class="nb">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">\right</span>.<span class="c">%与left成对
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\end</span><span class="nb">{</span>equation<span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示效果</p>
<p><img loading="lazy" src="/assets/img/vsctex2.jpg" alt="显示效果"  />
</p>
<h2 id="latex-文章模板">LaTex 文章模板</h2>
<p>这个版本是已经可以使用的。建议仔细阅读文档里面的注释，尽量理解含义。（这样您的 LaTex 就已经能走上正路了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl"><span class="k">\documentclass</span><span class="na">[UTF8]</span><span class="nb">{</span>ctexart<span class="nb">}</span><span class="c">%文档宏观定义
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\usepackage</span><span class="nb">{</span>lmodern<span class="nb">}</span><span class="c">%导入宏包，LaTex导入宏包多次不会报错，所以可以随便复制粘贴宏包，即使不需要
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\usepackage</span><span class="nb">{</span>amssymb<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>amsmath<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>float<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>adjustbox<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>geometry<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>fullpage<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>longtable<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>booktabs<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>tikz<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>listings<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>xcolor<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\usepackage</span><span class="nb">{</span>subfigure<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\lstset</span><span class="nb">{</span>
</span></span><span class="line"><span class="cl">      <span class="c">%背景框
</span></span></span><span class="line"><span class="cl"><span class="c"></span>      framexleftmargin=10mm,
</span></span><span class="line"><span class="cl">      frame=none,
</span></span><span class="line"><span class="cl">     <span class="c">%背景色
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     <span class="c">%backgroundcolor=\color[rgb]{1,1,0.76},
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     backgroundcolor=<span class="k">\color</span><span class="na">[RGB]</span><span class="nb">{</span>245,245,244<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">    <span class="c">%样式
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    keywordstyle=<span class="k">\bf\color</span><span class="nb">{</span>blue<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">     identifierstyle=<span class="k">\bf</span>,
</span></span><span class="line"><span class="cl">     numberstyle=<span class="k">\color</span><span class="na">[RGB]</span><span class="nb">{</span>0,192,192<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">     commentstyle=<span class="k">\it\color</span><span class="na">[RGB]</span><span class="nb">{</span>0,96,96<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">     stringstyle=<span class="k">\rmfamily\slshape\color</span><span class="na">[RGB]</span><span class="nb">{</span>128,0,0<span class="nb">}</span>,  <span class="c">%显示空格
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     showstringspaces=false
</span></span><span class="line"><span class="cl"> <span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\newcommand*</span><span class="nb">{</span><span class="k">\de</span><span class="nb">}{^</span><span class="k">\circ\hspace</span><span class="nb">{</span>-0.09em<span class="nb">}}</span>
</span></span><span class="line"><span class="cl"><span class="c">%温度
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\newcommand*</span><span class="nb">{</span><span class="k">\dif</span><span class="nb">}{</span><span class="k">\mathop</span><span class="nb">{}</span><span class="k">\!\mathrm</span><span class="nb">{</span>d<span class="nb">}}</span>
</span></span><span class="line"><span class="cl"><span class="c">%导数的d
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\newcommand*</span><span class="nb">{</span><span class="k">\e</span><span class="nb">}</span>[1]<span class="nb">{</span><span class="k">\times</span> 10<span class="nb">^{</span>#1<span class="nb">}}</span>
</span></span><span class="line"><span class="cl"><span class="c">%\e{}用来表示科学计数法
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\newcommand*</span><span class="nb">{</span><span class="k">\celsius</span><span class="nb">}{</span><span class="k">\ensuremath</span><span class="nb">{^</span><span class="k">\circ\hspace</span><span class="nb">{</span>-0.09em<span class="nb">}</span><span class="k">\mathrm</span><span class="nb">{</span>C<span class="nb">}}}</span>
</span></span><span class="line"><span class="cl"><span class="c">%摄氏度
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\ctexset</span><span class="nb">{</span>
</span></span><span class="line"><span class="cl">section = <span class="nb">{</span>
</span></span><span class="line"><span class="cl">format = <span class="k">\raggedright\large\bfseries</span>,
</span></span><span class="line"><span class="cl"><span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\title</span><span class="nb">{}</span><span class="c">%标题
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\author</span><span class="nb">{}</span><span class="c">%作者名
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\date</span><span class="nb">{</span><span class="k">\today</span><span class="nb">}</span><span class="c">%自动生成今天日期
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\geometry</span><span class="nb">{</span>hcentering<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\textwidth</span> 16cm<span class="c">%文章页面宽度
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\linespread</span><span class="nb">{</span>1<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="k">\setCJKmainfont</span><span class="nb">{</span>Microsoft YaHei<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="c">%设置字体
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span><span class="c">%文章开头
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\maketitle</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>enumerate<span class="nb">}</span><span class="c">%有序列表
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\item</span> <span class="c">%每一项以此引起
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\end</span><span class="nb">{</span>enumerate<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>itemize<span class="nb">}</span>无序列表
</span></span><span class="line"><span class="cl">    <span class="k">\item</span><span class="c">%每一项以此引起
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\end</span><span class="nb">{</span>itemize<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\section</span><span class="nb">{}</span><span class="c">%一级标题，编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\section*</span><span class="nb">{}</span><span class="c">%一级标题，不编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\subsection</span><span class="nb">{}</span><span class="c">%二级标题，编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\subsection*</span><span class="nb">{}</span><span class="c">%二级标题，不编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\subsubsection</span><span class="nb">{}</span><span class="c">%三级标题，编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\subsubsection*</span><span class="nb">{}</span><span class="c">%三级标题，不编号
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>figure<span class="nb">}</span>[H]<span class="c">%插入图片
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\centering</span><span class="c">%居中
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\includegraphics</span><span class="na">[height=12cm,width=0.6\linewidth]</span><span class="nb">{</span>5pic1.jpg<span class="nb">}</span>
</span></span><span class="line"><span class="cl">    <span class="c">%插入图片，方括号是调整大小，大括号是图片相对路径名，如果tex文件和图片在同一个文件夹下，可以直接写名字
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\caption</span><span class="nb">{}</span><span class="c">%描述名字
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">\end</span><span class="nb">{</span>figure<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>figure<span class="nb">}</span>[H]<span class="c">%多图片
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\centering</span>
</span></span><span class="line"><span class="cl">    <span class="k">\subfigure</span><span class="na">[title]</span><span class="c">%多图片的图片名
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">\begin</span><span class="nb">{</span>minipage<span class="nb">}</span>[t]<span class="nb">{</span>0.5<span class="k">\linewidth</span><span class="nb">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">\centering</span>
</span></span><span class="line"><span class="cl">            <span class="k">\includegraphics</span><span class="na">[width=\linewidth]</span><span class="nb">{</span>5pic3.jpg<span class="nb">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">\end</span><span class="nb">{</span>minipage<span class="nb">}</span><span class="c">%
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">\subfigure</span><span class="na">[]</span><span class="c">%多图片的图片名
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">\begin</span><span class="nb">{</span>minipage<span class="nb">}</span>[t]<span class="nb">{</span>0.5<span class="k">\linewidth</span><span class="nb">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">\centering</span>
</span></span><span class="line"><span class="cl">           <span class="k">\includegraphics</span><span class="na">[width=\linewidth]</span><span class="nb">{</span>5pic4.jpg<span class="nb">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">\end</span><span class="nb">{</span>minipage<span class="nb">}</span><span class="c">%
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="nb">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">\centering</span>
</span></span><span class="line"><span class="cl"><span class="k">\end</span><span class="nb">{</span>figure<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\begin</span><span class="nb">{</span>lstlisting<span class="nb">}</span>[language=c]
</span></span><span class="line"><span class="cl"><span class="c">%代码框，language选择语言
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    xx[j] = xx[j - 1] + d * vv[j - 1];
</span></span><span class="line"><span class="cl"><span class="k">\end</span><span class="nb">{</span>lstlisting<span class="nb">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在这个基础上删改就能编译出一篇好看的 pdf 文档了。</p>
<h2 id="表格">表格</h2>
<p>或许读者已经注意到，我给出的模板没有涉及表格。表格很重要，但是表格的语法比较复杂。这里笔者给出一个简单的解决方案<a href="https://www.ctan.org/tex-archive/support/excel2latex/">Excel2LaTex</a>。这是一个 excel 的宏文件。使用时启动加载，框选现成的 excel 表格部分，点击“加载项”里面的 Convert table to latex，就能自动生成 LaTex 的表格代码。</p>
<p><img loading="lazy" src="/assets/img/vsctex1.jpg" alt="excel2latex"  />
</p>
<p>这样会自动生成这样的 LaTex 代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl"> <span class="c">% Table generated by Excel2LaTeX from sheet &#39;Sheet1&#39;
</span></span></span><span class="line"><span class="cl"><span class="c"></span> <span class="k">\begin</span><span class="nb">{</span>table<span class="nb">}</span>[htbp]
</span></span><span class="line"><span class="cl">   <span class="k">\centering</span>
</span></span><span class="line"><span class="cl">   <span class="k">\caption</span><span class="nb">{</span>Add caption<span class="nb">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">\begin</span><span class="nb">{</span>tabular<span class="nb">}{</span>ccc<span class="nb">}</span>
</span></span><span class="line"><span class="cl">     C光 <span class="nb">&amp;</span> d光 <span class="nb">&amp;</span> F光 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     1.4 <span class="nb">&amp;</span> 1.5 <span class="nb">&amp;</span> 1.55 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     1.9 <span class="nb">&amp;</span> 2 <span class="nb">&amp;</span> 2.1 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     <span class="k">\end</span><span class="nb">{</span>tabular<span class="nb">}</span><span class="c">%
</span></span></span><span class="line"><span class="cl"><span class="c"></span>   <span class="k">\label</span><span class="nb">{</span>tab:addlabel<span class="nb">}</span><span class="c">%
</span></span></span><span class="line"><span class="cl"><span class="c"></span> <span class="k">\end</span><span class="nb">{</span>table<span class="nb">}</span><span class="c">%
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样的表格一般来说不尽如人意，笔者喜欢修改一些设置。注意对比不同点和阅读注释</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl"> <span class="k">\begin</span><span class="nb">{</span>table<span class="nb">}</span>[H]<span class="c">%大写H可以让表格一路排版下来，位置不浮动
</span></span></span><span class="line"><span class="cl"><span class="c"></span>   <span class="k">\centering</span><span class="c">%居中
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     <span class="k">\begin</span><span class="nb">{</span>tabular<span class="nb">}{</span>ccc<span class="nb">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">\toprule</span><span class="c">%插入分割线
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     C光 <span class="nb">&amp;</span> d光 <span class="nb">&amp;</span> F光 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     <span class="k">\midrule</span><span class="c">%插入分割线
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     1.4 <span class="nb">&amp;</span> 1.5 <span class="nb">&amp;</span> 1.55 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     1.9 <span class="nb">&amp;</span> 2 <span class="nb">&amp;</span> 2.1 <span class="k">\\</span>
</span></span><span class="line"><span class="cl">     <span class="k">\bottomrule</span><span class="c">%插入分割线
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     <span class="c">%这三个rule可以生成三线表格，比较学术化，美观
</span></span></span><span class="line"><span class="cl"><span class="c"></span>     <span class="k">\end</span><span class="nb">{</span>tabular<span class="nb">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">\label</span><span class="nb">{</span>tab:addlabel<span class="nb">}</span><span class="c">%标签
</span></span></span><span class="line"><span class="cl"><span class="c"></span>   <span class="k">\caption</span><span class="nb">{</span>Add caption<span class="nb">}</span><span class="c">%表格标题放在表格底下
</span></span></span><span class="line"><span class="cl"><span class="c"></span> <span class="k">\end</span><span class="nb">{</span>table<span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="内部引用">内部引用</h2>
<p>如果是文章内部自己要引用图片/表格/公式，在对应环境里面加上一句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">   <span class="k">\label</span><span class="nb">{</span>yinyong<span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>引用的时候</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">   <span class="k">\ref</span><span class="nb">{</span>yinyong<span class="nb">}</span><span class="c">%注意标签名字要对应
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>就会自动生成好对应的<strong>编号，不是 图片/表格/公式+编号</strong>。这样的 tex 文档要选择&quot;xe-&gt;xe-&gt;xe&quot;三次编译，才能建立起文档内部的引用关系。</p>
<h2 id="bibtex">bibTex</h2>
<p>在同一个目录里面新建一个.bib 格式文件。bibTex 的格式可以通过比如 EndNotes 等很多引用管理软件自动导出。注意第一行的“rn1”是文件的引用描述名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">   @book<span class="nb">{</span>rn1,
</span></span><span class="line"><span class="cl">   author = <span class="nb">{</span>李约瑟<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">   title = <span class="nb">{</span>中国科学技术史<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">   publisher = <span class="nb">{</span>香港 : 中华书局香港分局<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">   address = <span class="nb">{</span>香港<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">   year = <span class="nb">{</span>1975<span class="nb">}</span>,
</span></span><span class="line"><span class="cl">   type = <span class="nb">{</span>Book<span class="nb">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在写.tex 文件的时候，在需要引用的地方，写</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">   <span class="k">\cite</span><span class="nb">{</span>rn1<span class="nb">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在文章结尾处</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">    <span class="k">\bibliographystyle</span><span class="nb">{</span>gbt7714-2005<span class="nb">}</span><span class="c">%选择引用文献格式
</span></span></span><span class="line"><span class="cl"><span class="c"></span>    <span class="k">\bibliography</span><span class="nb">{</span>.bib<span class="nb">}</span><span class="c">%对应的.bib文件名字
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>选择&quot;xe-&gt;bib-&gt;xe-&gt;xe&quot;四次编译。LaTex 会根据文献最早在 tex 文档里面出现的顺序，在文章结尾自动排版文献的顺序。而且，出现在 bib 文件中，但最后 tex 文件中没有引用的文章，不会出现在最后的 pdf 文档当中。</p>
<p>bibTex 的优势就在于此，自由选择引用的格式，无需操心编号问题。</p>
]]></content:encoded></item><item><title>VS Code，All in One（2）——v0.2.0</title><link>https://livypad.github.io/post/2020-06-22-vsc2/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-06-22-vsc2/</guid><description>VS Code 以及其他的安利向（2）-markdown 何为 markdown markdown（有时候简称 md）是一个轻量的标记语言。和 word 不一样，Markdown 按照描</description><content:encoded><![CDATA[<h1 id="vs-code-以及其他的安利向2-markdown">VS Code 以及其他的安利向（2）-markdown</h1>
<h2 id="何为-markdown">何为 markdown</h2>
<p>markdown（有时候简称 md）是一个轻量的标记语言。和 word 不一样，Markdown 按照描述符来修饰语法。这个格式有以下一些优点：</p>
<ol>
<li>轻量级，基本上就是纯文本文件，方便进行版本管理。不像 docx 是 xml 文件的打包。</li>
<li>语法极其简单，容易入门（相比下一篇要写到的复杂的标记语言 Latex）</li>
<li>由于语法简单，阅读源码也能保持一定的体验</li>
<li>可以选择不同的预览格式</li>
<li>现在相对比较流行，应用广泛</li>
<li>可以拓展支持 Latex 公式</li>
</ol>
<h2 id="环境">环境</h2>
<h3 id="markdown-all-in-onehttpsmarketplacevisualstudiocomitemsitemnameyzhangmarkdown-all-in-one"><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a></h3>
<p>VS Code 下写 markdown，最基本的只需要安装插件<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a>。这个插件可以提供最基本的侧边预览（在文件右上角），以及打印成 html 格式文件（ctrl+shift+p，打印到 html）的功能。</p>
<h3 id="word-count-cjkhttpsmarketplacevisualstudiocomitemsitemnameholmescnvscode-wordcount-cjk"><a href="https://marketplace.visualstudio.com/items?itemName=holmescn.vscode-wordcount-cjk">Word Count CJK</a></h3>
<p>国人开发的，对 markdown 文件的字数统计。可以直接修改设置的 json 文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;wordcount_cjk.statusBarTextTemplate&#34;</span><span class="err">:</span> <span class="s2">&#34;共 ${cjk} 字，共${en_words}单词&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以在设置的图形界面，在拓展一栏直接找到 Status Bar Text Template，添加共 “${cjk} 字，共${en_words}单词”，这样就能同时统计中文和英文。</p>
<h3 id="docs-authoring-packhttpsmarketplacevisualstudiocomitemsitemnamedocsmsftdocs-authoring-pack"><a href="https://marketplace.visualstudio.com/items?itemName=docsmsft.docs-authoring-pack">Docs Authoring Pack</a></h3>
<p>一个合集。可以在状态栏给不熟悉语法的读者一些快捷键。而笔者主要只是用到 ta 的 markdown 格式检查功能。虽然 markdown 语法上简洁随意，但遵守一定的规范会让源代码阅读更加好看。可以在<a href="https://github.com/DavidAnson/markdownlint/blob/v0.20.3/doc/Rules.md">这里查看规则</a>。</p>
<p>还可以这样修订规则，选择部分规则不检查。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;markdownlint.config&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;MD036&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span><span class="c1">//可以复合使用加粗
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nt">&#34;MD028&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span><span class="c1">//引言间可以有空行分割
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nt">&#34;MD010&#34;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="c1">//允许空格
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="语法">语法</h2>
<h3 id="当我们在谈论文章的时候我们在谈论什么">当我们在谈论文章的时候我们在谈论什么</h3>
<p>在介绍 markdown 语法之前，需要先思考一个问题，一篇文章是什么，需要大概什么部分。</p>
<p>文章首先需要<strong>标题</strong>，文章的大标题，分节的标题。文章里面一些句子/段落需要<strong>加粗</strong>或者是<strong>斜体</strong>。文章很多时候需要列表，<strong>有序无序列表</strong>作为顺序结构。一篇文章可能需要插入，<strong>图片</strong>，<strong>表格</strong>，<strong>链接</strong>，<strong>数学公式</strong>这些辅助所里，有时候还需要插入<strong>代码块</strong>。还有，markdown 支持一个<strong>引言</strong>功能。</p>
<p>下面一个个看这些语法：</p>
<h3 id="标题">标题</h3>
<p>#用来表示标题，越多标题层次越小。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># 一级标题
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>
</span></span><span class="line"><span class="cl"><span class="gu">## 二级标题
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="加粗斜体">加粗，斜体</h3>
<p>用*括起文本实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">*斜体*
</span></span><span class="line"><span class="cl"><span class="gs">**加粗**</span>
</span></span><span class="line"><span class="cl"><span class="ge">**</span>*倾斜加粗***
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="图片链接数学公式代码块">图片，链接，数学公式，代码块</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">    ![<span class="nt">图片名</span>](<span class="na">图片地址</span>)
</span></span><span class="line"><span class="cl">    [<span class="nt">链接名</span>](<span class="na">链接地址</span>)
</span></span><span class="line"><span class="cl">    $行内公式$
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    $$
</span></span><span class="line"><span class="cl">    行间公式
</span></span><span class="line"><span class="cl">    $$
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ```语言名字
</span></span><span class="line"><span class="cl">        代码片段
</span></span><span class="line"><span class="cl">    ```
</span></span></code></pre></td></tr></table>
</div>
</div><p>|：表格功能，这个比较复杂，这里不详细说明。</p>
<h3 id="列表">列表</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="k">1.</span> 有序列表
</span></span><span class="line"><span class="cl"><span class="k">2.</span> 有序列表
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">-</span> 无序列表
</span></span><span class="line"><span class="cl"><span class="k">-</span> 无序列表
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="引用">引用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">    &gt;引文
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="示例">示例</h3>
<p>下面是一个 markdown 语法的示例，比较完整的示例各个基础语法，出自本人之前的博客文章</p>
<p><img loading="lazy" src="/assets/img/vscmd1.jpg" alt="示例"  />
</p>
<p>其实对于 markdown 入门，只需要记住#是表示标题的前驱就行。1 个#就是一级标题，2 个#就是二级标题，以此类推到六级标题。然后$就像 Latex 一样可以输入公式。这样的 markdown 已经能胜任很多小文章的编写工作了。</p>
<h2 id="导出">导出</h2>
<p>虽然 markdown 简单，轻量，接受度越来越广，但不是所有人都之前接触过 markdown 或者是有软件打开 md 格式文件。下面是导出“通用”格式的教程。</p>
<h3 id="html">html</h3>
<p>ctrl+shift+p 打开顶部搜索框，输入 markdown all in one 就能找到打印当前文档为 html 格式文件的选项。这个格式就已经可以发给移动端或 pc 端的他人了。html 文件就是网页文件，任何浏览器都能打开。</p>
<p>如果再本地用浏览器打开，就可以右键，使用浏览器自带的打印成 pdf 文件的功能。</p>
<h3 id="typorahttpstyporaio"><a href="https://typora.io/">Typora</a></h3>
<p>就如之前所说，md 已经得到广泛的应用，相应的市面上有很多专门的 markdown 编辑器（VS Code 是通用的文本编辑器），Typora 是其中一种。Typora 有导出为 pdf，docx 等各种常见格式的功能。Typora 还有各种 markdown 的主题，可以选择别的主题导出。</p>
<h3 id="pandochttpspandocorg"><a href="https://pandoc.org/">pandoc</a></h3>
<p>通用的命令行格式转换工具。（笔者也不是很会用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">pandoc</span> <span class="n">demo</span><span class="p">.</span><span class="nb">md </span><span class="n">-o</span> <span class="n">demo</span><span class="p">.</span><span class="n">pdf</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item><item><title>VS Code，All in One（1）——v0.2.0</title><link>https://livypad.github.io/post/2020-06-21-vsc1/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-06-21-vsc1/</guid><description>VS Code 以及其他的安利向（1) -编辑器 关于这个系列 大学以来，笔者接触了很多新东西，很想安利出去。但是如果是一对一安利，虽然能有及时反馈，但是一是</description><content:encoded><![CDATA[<h1 id="vs-code-以及其他的安利向1--编辑器">VS Code 以及其他的安利向（1) -编辑器</h1>
<h2 id="关于这个系列">关于这个系列</h2>
<p>大学以来，笔者接触了很多新东西，很想安利出去。但是如果是一对一安利，虽然能有及时反馈，但是一是略显尴尬，打字很不方便，二是笔者懒（抱歉），不想一个个人说。所以就萌生了写这个系列小文章的想法。</p>
<p>正好 VS Code 就是笔者一直以来的各个工作的共同平台，All in One 正是取其“全能”的含义。是有这个系列文章。</p>
<p>这是一个安利+教程向的文章。限于笔者水平（和懒惰），肯定会有一些谬误或者是不全面的地方。而且笔者也只有 win10 平台经验。按照笔者的经验，遇到的绝大多数问题，是可以当即依靠<strong>搜索引擎</strong>解决的。（当然，如果您希望笔者加上去，也欢迎私下联系我更新文章。</p>
<p>学习这些应用性技能的宗旨</p>
<p><strong>搜索引擎是最好的老师</strong></p>
<h2 id="什么是-vs-code">什么是 VS Code</h2>
<p>VS Code 是微软开源出来的一款代码编辑器。在此基础上再加上一些微软自己的服务，就是现在的 VS Code 软件。VS Code 可以很容易的从<a href="https://code.visualstudio.com/Download">官网上下载</a>，<a href="https://code.visualstudio.com/insiders/">Insiders 版本</a>（预览版本，更新更快，新功能上线早，可能不稳定）。</p>
<h2 id="什么是代码编辑器">什么是代码编辑器</h2>
<p>代码编辑器，顾名思义，就是编辑代码文件的。但是问题来了，这些文件究竟是什么，为什么笔者在这里推荐代码编辑器，不是别的软件？</p>
<h3 id="代码文档-vs-docx">代码文档 vs .docx</h3>
<p>读者应该都接触过 txt 格式的文件。上过大学，学过一些计算机方面的基础课的同学，可能还会接触.c,.cpp,.py,.md,.tex 等等格式的文件。这些文件看起来拓展名千差万别，但是读者可以做一个实验。文件里面写上“123456789”，文件的大小都是 9B。而若是在一个 docx 文档里面，文档大小是 11.8 KB。这个简单的对比就反映出，本质上，之前说的各个格式，都是某种意义上的纯文本文档，拓展名只是标识这个文件是什么类型的，需要什么样的编译器/解释器。而 docx，如果用压缩软件打开，其实是一系列的 xml 文件，word 软件对这一系列的文件，掩盖了在文本文档层面的工作，而展现出一个整体的效果。</p>
<p><img loading="lazy" src="/assets/img/vscset2.jpg" alt="docx"  />
</p>
<p>从这点出发，我们就可以用同一个代码编辑器，处理不同的代码文档，毕竟 ta 们本质都是文本文档。</p>
<h3 id="代码编辑器-vs-记事本">代码编辑器 vs 记事本</h3>
<p>既然说到文本文档，大家第一反应一般都是记事本。记事本当然是可以写代码文件的，毕竟记事本是可以处理 txt 这样的文本文档的。如果不信，可以看下面的对比图。左边为 VS Code，右边是记事本，文件是笔者之前光线追迹里面提到的.py 文件。</p>
<p><img loading="lazy" src="/assets/img/vscset3.jpg" alt="txt"  />
</p>
<p>但这么一对比，直观上看，记事本毕竟没有专门的设计。相比较正牌的代码编辑器，ta 缺少比如自动补全，代码语法高亮等等好用的功能。最多说能用，但是很不趁手。</p>
<h3 id="代码编辑器-vs-集成开发环境">代码编辑器 vs 集成开发环境</h3>
<p>集成开发环境（IDE，下文也会这样简称）顾名思义，就是集成了大量的辅助功能，针对性的开发软件。例如学 c/cpp 读者可能接触过的 Visual Studio，Dev-C++，学 python 读者接触过的 PyCharm，都是所谓的 IDE。</p>
<p>与代码编辑器孰优孰劣其实是个延续已久的话题。一般来说，毕竟 IDE 集成了大量的辅助功能，在实际生产环境中，比起代码编辑器，还是更胜一筹（比如笔者虽然选择在 VS Code 里面写 cpp，但复杂调试的工作还是在 VS 2019 里面进行）。而正由于这样的强大的功能，IDE 一般来说，体积巨大，加载也比代码编辑器慢。而且，一般来说，IDE 针对少数几种语言设计，如果自己需要的不止一种，可能还有切换的麻烦。</p>
<p>相比而言，通过插件的帮助，代码编辑器可以适配绝大多数语言。而更小的体积，更精简的功能让代码编辑器加载更快，更轻量。而对一些要求不高的项目/任务，代码编辑器也能胜任，这样就不需要安装/加载体积巨大的 IDE。</p>
<h3 id="为何选择-vs-code">为何选择 VS Code</h3>
<ol>
<li>作为代码编辑器，安装插件后，就能适应很多编程语言和琐碎应用场景。</li>
<li>微软大厂更新勤快，新功能上线多，官方就有很多插件支持。而且现在已经支持用微软账户或 GitHub
账户同步设置。</li>
<li>目前 VS Code 市场份额大，而且还在上升趋势。插件开发多，教程多。</li>
<li>开源免费软件，不怕封锁。这个系列之后介绍的也主要是开源方案，适合于跨平台和对抗科技封锁。</li>
</ol>
<p><strong>本质上来说，笔者希望这个系列的教程，提供基于 VS Code 的，大量工作流程/场景的“一站式解决方案”。</strong></p>
<h2 id="安装">安装</h2>
<p>按照上述地址，或者使用搜索引擎就能很快完成 VS Code 的安装。唯一需要注意的可能就是勾选注册 VS Code 为 Path，和添加到右键菜单。现在只建议在常用设置里面，把自动保存 Auto Save 改成 afterDelay（就是允许自动保存）。这样不需要频繁按保存键。</p>
<h2 id="界面介绍">界面介绍</h2>
<p>左边是侧边栏。文件是基本编辑区，方块是拓展市场，左下角头像是配置同步设置，齿轮就是设置。</p>
<h2 id="字体和美化">字体和美化</h2>
<p><strong>这些主题，字体等设置纯属个人审美倾向</strong></p>
<p>笔者非常喜欢<a href="https://github.com/tonsky/FiraCode/releases">Fira Code</a>这个字体。这个等宽字体能很好的区分 1l0o 这样的字母，还支持连字符的特性。例如输入！=就会自动转换为$\neq$，非常美观。中文可以选择微软雅黑或者是<a href="https://github.com/adobe-fonts/source-han-sans/tree/release">思源黑体</a>。同样在设置里面更改字体<img loading="lazy" src="/assets/img/vscset1.jpg" alt="字体设置"  />
</p>
<p>同样的，单击齿轮图标，可以修改配色和文件图标。更多的文件图标和配色主题，在之前介绍的拓展里面搜索下载。文件图标推荐选择 Material Icon Theme。亮色主题使用自带的 Light+就很好，需要更换也可以选择 Github Theme 里面的亮色主题。自带的 Dark+背景有点太黑了，所以笔者推荐 One Dark Pro，这个暗色主题适合写 Python，md，写 c++有点太多红色了。如果写 Latex，笔者喜欢 Linux Themes for VS Code 当中的 Adapta Nokto，公式比较鲜艳，而且照明环境下，不显得太黑。</p>
<h2 id="杂项">杂项</h2>
<h3 id="中文支持">中文支持</h3>
<p>在拓展市场中搜索 Chinese (Simplified) Language Pack for Visual Studio Code 就能找到官方的汉化插件。按照指示安装就能配置好中文支持。</p>
<p><strong>注意：该中文是不一定保证完全覆盖的。很多时候还是会接触到英文界面</strong></p>
<h3 id="文件编码">文件编码</h3>
<p>在状态栏上，右下角例如 UTF-8 就是当前文件的编码。如果一直使用 VS Code 这不构出问题。但是现在还是有很多软件，其文件的默认编码为 GBK 等，包括 Matlab，Code Composer Studio，微软自家的 VS2019 等。而 VS Code 的默认编码方式为 UTF-8。编码不一样打开文件就会乱码。要解决文件乱码问题</p>
<ol>
<li>单击编码标签，选择“通过编码重新打开”，选择原文件的编码.这样就能解决显示问题</li>
<li>再单击编码标签，选择“通过编码保存”，选择 UTF-8。下次再用 VS Code 打开就不会出现乱码。</li>
</ol>
<h3 id="设置同步">设置同步</h3>
<p>左下角的头像就是设置同步账号，按提示操作就能同步自己的 VS Code 配置。可以选择使用微软账户（一般安装 win10 系统，上云端的就是微软账户）或者是 Github 账户同步。</p>
<h3 id="ctrlshiftp">ctrl+shift+p</h3>
<p>VS Code 的通用顶部功能搜索框。可以依靠这一功能，快速搜索需要的操作而不用背诵快捷键</p>
<h3 id="drawio-integration">Draw.io Integration</h3>
<p>一个本地画流程图的实用插件。新建一个后缀为.dio 的文件，打开就是绘制流程图的界面。简单易上手。</p>
<h3 id="binary">Binary</h3>
<p>可以查看文件的二进制预览形式。</p>
<h3 id="gitlens">Gitlens</h3>
<p>git 功能的拓展，查看历史更方便。但是笔者自己对 git 的理解也不多，暂时不深入说明。</p>
<h3 id="vsc-netease-music">VSC Netease Music</h3>
<p>在 VS Code 里面听网易云音乐。现在由于 VS Code 自身的问题，还需要修复。所以这里就暂不推荐该拓展。有余力的可以按照官方指引修复。</p>
<h3 id="用户代码片段">用户代码片段</h3>
<p>用户代码片段，乍一眼看上去可能会感觉到不知所云，其实这个功能是用来提供自定义代码补全的。点击设置按钮即可为全局或者是特定语言进行设置。而设置的语法参考教程就行。下面是对 latex 语言的设置举例（latex 教程见本系列后续文章）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Place your snippets for latex here. Each snippet is defined under a snippet name and has a prefix, body and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// same ids are connected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// Example:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// &#34;Print to console&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 	&#34;prefix&#34;: &#34;log&#34;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 	&#34;body&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 		&#34;console.log(&#39;$1&#39;);&#34;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 		&#34;$2&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 	],
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 	&#34;description&#34;: &#34;Log output to console&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nt">&#34;Input a figure&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;fig&#34;</span><span class="p">,</span> <span class="c1">//代码自动补全的名字
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;\\begin{figure}[H]&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;\t\\centering&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;\t\\includegraphics[width=\\linewidth]{$1}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;\t\\caption{$2}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;\\end{figure}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;$0&#34;</span> <span class="c1">//正式的代码段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Input a figure&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;aligned&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;aligned&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;\\begin{aligned}&#34;</span><span class="p">,</span> <span class="s2">&#34;\t$1&#34;</span><span class="p">,</span> <span class="s2">&#34;\\end{aligned}$0&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Input an aligned env&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item><item><title>简单信号处理</title><link>https://livypad.github.io/post/2020-06-18-sigpro/</link><pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-06-18-sigpro/</guid><description>简单信号处理 题目 物理知识告诉我们，对运动物体发射波，反射的波会受到多普勒效应的影响，造成反射波的频率的改变。而这一改变和物与发射源运动速度相</description><content:encoded><![CDATA[<h1 id="简单信号处理">简单信号处理</h1>
<h2 id="题目">题目</h2>
<p>物理知识告诉我们，对运动物体发射波，反射的波会受到多普勒效应的影响，造成反射波的频率的改变。而这一改变和物与发射源运动速度相关。这就是多普勒测速的基本原理。本题只需要处理出频率变化量。</p>
<p>简化实际情况，假设发射信号为$x(t)=A\cos(\omega_0 t+\phi)$，而接受信号接收到反射静止物体和运动物体的信号，为$y(t)=B\cos(\omega_0(t-t_0)+\phi)+D\cos(\omega_0(t-t_0)+\phi)$。而且为了方便，假定机器保留了原始的输出信号。</p>
<h2 id="流程图">流程图</h2>
<p>基本设计思路如下</p>
<p><img loading="lazy" src="/assets/img/sig1.png" alt="流程图"  />
</p>
<p>这个设计的基本思路是借鉴了双边带抑制载波调制的思路。借鉴自乘和滤波，获得低频的多普勒偏移频率。</p>
<h2 id="数学证明">数学证明</h2>
<p>为了简化推导，接收的信号的时延，可以划归到相位变化中。即</p>
<p>$$
y(t)=B\cos(\omega_0t+\phi_1)+D\cos((\omega_0+\omega_d)t+\phi_2)\tag{1}
$$</p>
<p>将信号和原始信号导入乘法器，得到</p>
<p>$$
x(t)*y(t)=\frac{AB}{2}(\cos(2\omega_0t+\phi_1)+\cos\phi_1)+\\ \frac{AD}{2}(\cos((2\omega_0+\omega_d)t+\phi_2)+\cos(\omega_d t+\phi_2)) \tag{2}
$$</p>
<p>观察这个形式，很容易注意到，频率分量为$2\omega_0,2\omega_0+\omega_d,\omega_d,0$,分别是高频部分和低频部分。那么非常自然的想到，让信号通过一个低通滤波器即可。</p>
<p>$$
proc1(t)=\frac{AB}{2}\cos\phi_1+\frac{AD}{2}\cos(\omega_d t+\phi_2)\tag{3}
$$</p>
<p>接下来想办法去除直流分量，就可以得到多普勒频率信号本身。由于实际上，我们是对离散量进行处理，那么去除直流量，可以简化成，求出信号在一段时间中离散值的平均数，减去即可。</p>
<p>$$
proc1(t).average()=\frac{AB}{2}\cos\phi_1\tag{4}
$$</p>
<p>最后得到想要的信号。</p>
<p>$$
\begin{aligned}
proc2(t)&amp;=proc1(t)-proc1(t).average()\\
&amp;=\frac{AD}{2}\cos(\omega_d t+\phi_2)
\end{aligned}\tag{5}
$$</p>
<h2 id="实现细节">实现细节</h2>
<p>由于这是数字信号处理，所以不需要再加上专门的“去直流”。对离散值直接求平均减去即可。</p>
<p>滤波器采用 8 阶 Butterworth 低通滤波器。</p>
<h2 id="结果">结果</h2>
<p><img loading="lazy" src="/assets/img/sig2.png" alt="结果"  />
</p>
<p>图一为频谱，红色为相乘信号，蓝色为输出信号。图二为时域。蓝色信号为输出，红色信号是初始发出的雷达信号，作为对比。</p>
<h2 id="源代码">源代码</h2>
<p>完整源代码如下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="n">w</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">105</span><span class="p">]</span>  <span class="c1">#频率</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>  <span class="c1">#幅值</span>
</span></span><span class="line"><span class="cl"><span class="n">ph</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">,</span> <span class="mf">0.73</span><span class="p">]</span>  <span class="c1">#相位</span>
</span></span><span class="line"><span class="cl"><span class="n">N</span> <span class="o">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#初始信号</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">xtsig</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">t</span> <span class="o">+</span> <span class="n">ph</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#回波</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ytsig</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">t</span> <span class="o">+</span> <span class="n">ph</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">t</span> <span class="o">+</span> <span class="n">ph</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ytsig</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">xtsig</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">time</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mulxy</span> <span class="o">=</span> <span class="n">mul</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">xtsig</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#滤波</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">signal</span><span class="o">.</span><span class="n">butter</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mf">0.02</span><span class="p">,</span> <span class="s1">&#39;lowpass&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">low</span> <span class="o">=</span> <span class="n">signal</span><span class="o">.</span><span class="n">filtfilt</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">mulxy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#去除直流分量</span>
</span></span><span class="line"><span class="cl"><span class="n">ave</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">average</span><span class="p">(</span><span class="n">low</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">low</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="n">ave</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">mulxy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">absf1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span> <span class="o">/</span> <span class="n">N</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">absf2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">f2</span><span class="p">)</span> <span class="o">/</span> <span class="n">N</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">low</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">absf3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">f3</span><span class="p">)</span> <span class="o">/</span> <span class="n">N</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">211</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p1</span><span class="p">,</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">absf1</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p2</span><span class="p">,</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">absf2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p3</span><span class="p">,</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">absf3</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">212</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p4</span><span class="p">,</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">low</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">p5</span><span class="p">,</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item><item><title>关于这个博客的搭建</title><link>https://livypad.github.io/post/2020-06-17-blog/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-06-17-blog/</guid><description>关于这个博客的搭建 缘由 自己搭建博客很有意思。（人就是要折腾 很好的展示自己的平台 界面相对自由 如何搭建 Jekll 是个简单的博客服务。而 GitHub Pages 基于 Jekyll 构建，可</description><content:encoded><![CDATA[<h1 id="关于这个博客的搭建">关于这个博客的搭建</h1>
<h2 id="缘由">缘由</h2>
<ol>
<li>自己搭建博客很有意思。（人就是要折腾</li>
<li>很好的展示自己的平台</li>
<li>界面相对自由</li>
</ol>
<h2 id="如何搭建">如何搭建</h2>
<p>Jekll 是个简单的博客服务。而 GitHub Pages 基于 Jekyll 构建，可以很简单地（就像在这篇文章接下来介绍的）在 GitHub 上免费发布网站和个人博客。</p>
<p><strong>警告，下列操作涉及的网站很多只有英文界面</strong></p>
<p><strong>这只是一个非常初级的教程，而且笔者水平有限，必有谬误，敬请指正</strong></p>
<p><strong>网络不是法外之地，希望大家不要滥用博客功能</strong></p>
<h3 id="github-初始化">Github 初始化</h3>
<p>注册一个<a href="https://github.com/">Github</a>账户。创建一个 Respority（代码存储库）。用户名按照 username.GitHub.io 这样的格式。在 Settings(设置)下面找到 Github Pages，选择一个主题。Github 就会自动创建好一个用于个人博客的库。这个时候，博客就可以通过在浏览器输入 username.GitHub.io 访问。</p>
<p>为了方便博客的编写，笔者自己采用的方法是下载<a href="https://desktop.github.com/">Github 的桌面客户端</a>，并搭配<a href="https://code.visualstudio.com/">VS Code</a>作为对应编辑器使用（现在微软由于收购了 Github，这两者的结合还是很方便的）。</p>
<h3 id="博客设置">博客设置</h3>
<p>Github 默认创建的博客虽然已经可以访问，但是一般来说还不是很全面。而笔者的建议是，</p>
<ol>
<li>用 Github 的桌面端软件把原来的 Respority Clone（复制）到本地</li>
<li>在 Jekll 官网上下载一个好看的主题（或者如果喜欢的话，也可以选择笔者的）</li>
<li>直接将解压后的主题文件夹（除了.git 文件）直接在本地复制粘贴到原来的 Respority 对应的文件夹下面</li>
<li>同步</li>
</ol>
<p>这样就能快速换成自己想要的，而且是别人已经帮配置好的主题。</p>
<h3 id="写博客">写博客</h3>
<p><strong>警告，不同的主题之间可能有一定的差异</strong></p>
<p>用我们之前下好的 VS Code 打开本地的 Respority 文件夹，就可以开始写博客了。</p>
<p>Jekll 的博客一般通过 markdown 语法进行编写。博文新建在_posts 文件夹下，命名格式为时间加题目<code>20XX-XX-XX-title.md</code>。
在 md 文件题头还要加上描述符。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">layout: default
</span></span><span class="line"><span class="cl">title: &#34;XX&#34;
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他部分和一般的 markdown 语法相近。如</p>
<ul>
<li><code>#</code> 用来表示标题，1-6 个，越少标题越大</li>
<li><code>**</code>斜体</li>
<li><code>****</code>加粗</li>
<li>``````中间包含代码块</li>
</ul>
<p>如果需要插入图片，将图片放/assets/img 文件夹下，通过<code>![描述名](/assets/img/图片名)</code>来引用。</p>
<p>如果需要支持 Latex 公式，可以自行上网搜索，如何加入 mathJx 脚本，支持 latex 公式。本博客目前已经支持。</p>
<p>发布博客时，只需要提交更改，并同步即可。网页会自动帮助转换 md 文档为网页博客。</p>
]]></content:encoded></item><item><title>Welcome to Jekyll!</title><link>https://livypad.github.io/post/2020-05-06-heloworld/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-05-06-heloworld/</guid><description>hello world 先试一下怎么用</description><content:encoded>&lt;h1 id="hello-world">hello world&lt;/h1>
&lt;p>先试一下怎么用&lt;/p></content:encoded></item><item><title>光线追迹</title><link>https://livypad.github.io/post/2020-05-06-light/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://livypad.github.io/post/2020-05-06-light/</guid><description>球差仿真计算 Python 可以做很多事情，比如进行光学追迹的简单计算。这是一个课程的小实验作业。 题目 运用光线追迹公式，对 d，F，C 光绘制出球差曲线。 编译</description><content:encoded><![CDATA[<h1 id="球差仿真计算">球差仿真计算</h1>
<p>Python 可以做很多事情，比如进行光学追迹的简单计算。这是一个课程的小实验作业。</p>
<h2 id="题目">题目</h2>
<p>运用光线追迹公式，对 d，F，C 光绘制出球差曲线。</p>
<h2 id="编译环境">编译环境</h2>
<p>使用 Anaconda 的 Python3.7.6 解释器。需要额外安装包：sympy，matploylib。</p>
<h2 id="基本设置">基本设置</h2>
<ul>
<li>物距 $l=-1000$mm</li>
<li>透镜半径 $r1=150$mm</li>
<li>透镜半径 $r2=-120$mm</li>
<li>透镜半径 $r3=200$mm</li>
<li>厚度 $d1=20$mm</li>
<li>厚度 $d2=20$mm</li>
</ul>
<p>折射率</p>
<table>
<thead>
<tr>
<th>C 光</th>
<th>d 光</th>
<th>F 光</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.4</td>
<td>1.55</td>
<td>1.6</td>
</tr>
<tr>
<td>1.9</td>
<td>2.1</td>
<td>2.2</td>
</tr>
</tbody>
</table>
<p>依据式子</p>
<p>$$
\sqrt{r[1]^2-h^2}+r[1]-\sqrt{r[2]^2-h^2}-r[2]=d[1]
$$</p>
<p>计算出，以第一个透镜为光阑，光阑投射高度$h=50.62$mm。</p>
<h2 id="球差曲线">球差曲线</h2>
<p><img loading="lazy" src="/assets/img/light.jpeg" alt="球差曲线"  />
</p>
<h2 id="源代码">源代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#理想光线追迹</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">idealight</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">l1</span><span class="o">=-</span><span class="mi">1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">u11</span> <span class="o">=</span> <span class="mf">0.0000001</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">i11</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">u11</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">i12</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">i11</span> <span class="o">/</span> <span class="n">n1</span>
</span></span><span class="line"><span class="cl">    <span class="n">u12</span> <span class="o">=</span> <span class="n">u11</span> <span class="o">+</span> <span class="n">i11</span> <span class="o">-</span> <span class="n">i12</span>
</span></span><span class="line"><span class="cl">    <span class="n">l12</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">i12</span> <span class="o">/</span> <span class="n">u12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">l21</span> <span class="o">=</span> <span class="n">l12</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">u21</span> <span class="o">=</span> <span class="n">u12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">i21</span> <span class="o">=</span> <span class="p">(</span><span class="n">l21</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">u21</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">i22</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">*</span> <span class="n">i21</span> <span class="o">/</span> <span class="n">n2</span>
</span></span><span class="line"><span class="cl">    <span class="n">u22</span> <span class="o">=</span> <span class="n">u21</span> <span class="o">+</span> <span class="n">i21</span> <span class="o">-</span> <span class="n">i22</span>
</span></span><span class="line"><span class="cl">    <span class="n">l22</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">u22</span> <span class="o">+</span> <span class="n">i22</span><span class="p">)</span> <span class="o">/</span> <span class="n">u22</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">l31</span> <span class="o">=</span> <span class="n">l22</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">u31</span> <span class="o">=</span> <span class="n">u22</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">i31</span> <span class="o">=</span> <span class="p">(</span><span class="n">l31</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">*</span> <span class="n">u31</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">i32</span> <span class="o">=</span> <span class="n">n2</span> <span class="o">*</span> <span class="n">i31</span>
</span></span><span class="line"><span class="cl">    <span class="n">u32</span> <span class="o">=</span> <span class="n">u31</span> <span class="o">+</span> <span class="n">i31</span> <span class="o">-</span> <span class="n">i32</span>
</span></span><span class="line"><span class="cl">    <span class="n">l32</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">i32</span> <span class="o">/</span> <span class="n">u32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">l32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#实际光线追迹</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">reallight</span><span class="p">(</span><span class="n">u11</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">l1</span><span class="o">=-</span><span class="mi">1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">sini11</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">u11</span><span class="p">)</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">sini12</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">sini11</span> <span class="o">/</span> <span class="n">n1</span>
</span></span><span class="line"><span class="cl">    <span class="n">u12</span> <span class="o">=</span> <span class="n">u11</span> <span class="o">+</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini11</span><span class="p">)</span> <span class="o">-</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">l12</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">sini12</span> <span class="o">/</span> <span class="n">sin</span><span class="p">(</span><span class="n">u12</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">l21</span> <span class="o">=</span> <span class="n">l12</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">u21</span> <span class="o">=</span> <span class="n">u12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sini21</span> <span class="o">=</span> <span class="p">(</span><span class="n">l21</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">u21</span><span class="p">)</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sini22</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">*</span> <span class="n">sini21</span> <span class="o">/</span> <span class="n">n2</span>
</span></span><span class="line"><span class="cl">    <span class="n">u22</span> <span class="o">=</span> <span class="n">u21</span> <span class="o">+</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini21</span><span class="p">)</span> <span class="o">-</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini22</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">l22</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">u22</span><span class="p">)</span> <span class="o">+</span> <span class="n">sini22</span><span class="p">)</span> <span class="o">/</span> <span class="n">sin</span><span class="p">(</span><span class="n">u22</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">l31</span> <span class="o">=</span> <span class="n">l22</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">u31</span> <span class="o">=</span> <span class="n">u22</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sini31</span> <span class="o">=</span> <span class="p">(</span><span class="n">l31</span> <span class="o">-</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">u31</span><span class="p">)</span> <span class="o">/</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">sini32</span> <span class="o">=</span> <span class="n">n2</span> <span class="o">*</span> <span class="n">sini31</span>
</span></span><span class="line"><span class="cl">    <span class="n">u32</span> <span class="o">=</span> <span class="n">u31</span> <span class="o">+</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini31</span><span class="p">)</span> <span class="o">-</span> <span class="n">asin</span><span class="p">(</span><span class="n">sini32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">l32</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">sini32</span> <span class="o">/</span> <span class="n">sin</span><span class="p">(</span><span class="n">u32</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">l32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#初始条件：物距，透镜半径，透镜距离,对应</span>
</span></span><span class="line"><span class="cl"><span class="c1">#初始0是因为python从0索引</span>
</span></span><span class="line"><span class="cl"><span class="n">l</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="o">-</span><span class="mi">120</span><span class="p">,</span> <span class="o">-</span><span class="mi">200</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#折射率 C,d,F</span>
</span></span><span class="line"><span class="cl"><span class="n">n1</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.4</span><span class="p">,</span><span class="mf">1.55</span><span class="p">,</span><span class="mf">1.6</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">n2</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.9</span><span class="p">,</span> <span class="mf">2.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#求解光阑参数：以第一个透镜为光阑</span>
</span></span><span class="line"><span class="cl"><span class="n">h</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">maxh</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span> <span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span><span class="o">-</span><span class="n">h</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mf">0.5</span><span class="o">+</span><span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span><span class="o">-</span><span class="n">h</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mf">0.5</span><span class="o">-</span><span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">maxu</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10000</span><span class="o">*</span><span class="n">atan</span><span class="p">(</span><span class="n">maxh</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="o">-</span><span class="n">l</span> <span class="o">+</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">maxh</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#初始化序列</span>
</span></span><span class="line"><span class="cl"><span class="n">divi</span><span class="o">=</span><span class="mi">500</span>
</span></span><span class="line"><span class="cl"><span class="n">uin</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">maxu</span><span class="o">/</span><span class="mi">10000</span><span class="p">,</span> <span class="n">divi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#初始化光线</span>
</span></span><span class="line"><span class="cl"><span class="n">deltac</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">divi</span>
</span></span><span class="line"><span class="cl"><span class="n">deltad</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">divi</span>
</span></span><span class="line"><span class="cl"><span class="n">deltaf</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">divi</span>
</span></span><span class="line"><span class="cl"><span class="c1">#列表</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">divi</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">deltac</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">idealight</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="n">reallight</span><span class="p">(</span><span class="n">uin</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">l</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">deltad</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">idealight</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="n">reallight</span><span class="p">(</span><span class="n">uin</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">l</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">deltaf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">idealight</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="n">reallight</span><span class="p">(</span><span class="n">uin</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">r</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">n2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">l</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#画图</span>
</span></span><span class="line"><span class="cl"><span class="n">pc</span><span class="p">,</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">uin</span><span class="p">,</span> <span class="n">deltac</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;C&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pd</span><span class="p">,</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">uin</span><span class="p">,</span> <span class="n">deltad</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;d&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;gold&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pf</span><span class="p">,</span><span class="o">=</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">uin</span><span class="p">,</span> <span class="n">deltaf</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;U/rad&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">&#39;delta/mm&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">handles</span> <span class="o">=</span> <span class="p">[</span><span class="n">pc</span><span class="p">,</span><span class="n">pd</span><span class="p">,</span><span class="n">pf</span><span class="p">],</span><span class="n">loc</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item></channel></rss>